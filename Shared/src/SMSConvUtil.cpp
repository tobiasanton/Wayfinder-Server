/*
Copyright (c) 1999 - 2010, Vodafone Group Services Ltd
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
    * Neither the name of the Vodafone Group Services Ltd nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

#include "config.h"

#include "SMSConvUtil.h"
#include "UTF8Util.h"
#include "TextIterator.h"
#include "CharEncoding.h"

int
SMSConvUtil::gsmToIso(char* outBuffer, const char* inBuffer, int dataSize)
{
   for(int i = 0; i < dataSize; i++) {
      outBuffer[i] = GSMToISO_table[((byte)inBuffer[i]) & 0x7f];
   }
   return dataSize;
}


int
SMSConvUtil::isoToGsm(char* outBuffer, const char* inBuffer, int dataSize)
{
   for(int i=0; i < dataSize; i++ ) {
      outBuffer[i] = ISOToGSM_table[(byte)inBuffer[i]];
   }
   return dataSize;
}

int
SMSConvUtil::gsmToUtf8(char* outBuffer, const char* inBuffer, int dataSize)
{
   MC2String res;
   // Here we will lose some characters (the greek ones)
   bool escape = false;
   for(int i = 0; i < dataSize; i++) {
      if( (byte)inBuffer[i] == 0x1B ) {
         escape = true;
         continue;
      }
      if( escape ) {
         char c = GSMEscapeToISO_table[(byte)inBuffer[i] & 0x7f];
         if( (byte) c == 0x20 ) {
            res += GSMToISO_table[((byte)inBuffer[i]) & 0x7f];
         } else {
            res += c;
         }
         escape = false;
      } else {
         res += GSMToISO_table[((byte)inBuffer[i]) & 0x7f];
      }
   }
   // Now convert this to UTF8
   int inlen = dataSize;
   int outlen = 0;
   char* tmp = UTF8Util::isoToUtf8( res.c_str(), &outlen, &inlen );
   memcpy( outBuffer, tmp, outlen );
   delete [] tmp;
   return outlen;
}


int
SMSConvUtil::utf8ToGsm(char* outBuffer, const char* inBuffer, int dataSize)
{
   // Convert the UTF-8 to ISO and (FIXME) lose some characters in the process
   int outPos = 0;
   for( utf8TextIterator it(inBuffer, dataSize);
        *it != 0;
        ++it ) {
      uint32 unicodeChar = *it;
      if ( unicodeChar < 256 ) {
         char c = ISOToGSMEscape_table[unicodeChar];
         if( (byte) c != 0x20 ) {
            outBuffer[outPos++] = (char)0x1B;
            outBuffer[outPos++] = c;
         } else {
            outBuffer[outPos++] = ISOToGSM_table[unicodeChar];
         }
      } else {
         uint32 tmpRes = CharEncoding::unicodeToLatin1( unicodeChar );
         if ( tmpRes == 0 || tmpRes > 255 ) {
            tmpRes = ' ';
         }
         outBuffer[outPos++] = ISOToGSM_table[ tmpRes ];
      }
   }
   return outPos;
}

int
SMSConvUtil::gsmToMc2(char* outBuffer, const char* inBuffer, int dataSize)
{
#ifdef MC2_UTF8
   return gsmToUtf8( outBuffer, inBuffer, dataSize );
#else
   return gsmToIso( outBuffer, inBuffer, dataSize );
#endif
}


int
SMSConvUtil::mc2ToGsm(char* outBuffer, const char* inBuffer, int dataSize)
{
#ifdef MC2_UTF8
   return utf8ToGsm( outBuffer, inBuffer, dataSize );
#else
   return isoToGsm( outBuffer, inBuffer, dataSize );
#endif
}

const char SMSConvUtil::GSMToISO_table[] = {
   (char)0x40, // 0x00 = @
   (char)0xA3, // 0x01 = £
   (char)0x24, // 0x02 = $
   (char)0xA5, // 0x03 = ¥ 
   (char)0xE8, // 0x04 = è
   (char)0xE9, // 0x05 = é
   (char)0xF9, // 0x06 = ù
   (char)0xEC, // 0x07 = ì
   (char)0xF2, // 0x08 = ò
   (char)0xC7, // 0x09 = Ç
   (char)0x0A, // 0x0A = 
   (char)0xD8, // 0x0B = Ø
   (char)0xF8, // 0x0C = ø
   (char)0x0D, // 0x0D = 
   (char)0xC5, // 0x0E = Å
   (char)0xE5, // 0x0F = å
   (char)0x20, // 0x10 =  
   (char)0x5F, // 0x11 = _
   (char)0x20, // 0x12 =  
   (char)0x20, // 0x13 =  
   (char)0x20, // 0x14 =  
   (char)0x20, // 0x15 =  
   (char)0x20, // 0x16 =  
   (char)0x20, // 0x17 =  
   (char)0x20, // 0x18 =  
   (char)0x20, // 0x19 =  
   (char)0x20, // 0x1A =  
   (char)0x20, // 0x1B =  
   (char)0xC6, // 0x1C = Æ
   (char)0xE6, // 0x1D = æ
   (char)0xDF, // 0x1E = ß
   (char)0xC9, // 0x1F = É
   (char)0x20, // 0x20 =  
   (char)0x21, // 0x21 = !
   (char)0x22, // 0x22 = "
   (char)0x23, // 0x23 = #
   (char)0xA4, // 0x24 = ¤
   (char)0x25, // 0x25 = %
   (char)0x26, // 0x26 = &
   (char)0x27, // 0x27 = '
   (char)0x28, // 0x28 = (
   (char)0x29, // 0x29 = )
   (char)0x2A, // 0x2A = *
   (char)0x2B, // 0x2B = +
   (char)0x2C, // 0x2C = ,
   (char)0x2D, // 0x2D = -
   (char)0x2E, // 0x2E = .
   (char)0x2F, // 0x2F = /
   (char)0x30, // 0x30 = 0
   (char)0x31, // 0x31 = 1
   (char)0x32, // 0x32 = 2
   (char)0x33, // 0x33 = 3
   (char)0x34, // 0x34 = 4
   (char)0x35, // 0x35 = 5
   (char)0x36, // 0x36 = 6
   (char)0x37, // 0x37 = 7
   (char)0x38, // 0x38 = 8
   (char)0x39, // 0x39 = 9
   (char)0x3A, // 0x3A = :
   (char)0x3B, // 0x3B = ;
   (char)0x3C, // 0x3C = <
   (char)0x3D, // 0x3D = =
   (char)0x3E, // 0x3E = >
   (char)0x3F, // 0x3F = ?
   (char)0xA1, // 0x40 = ¡
   (char)0x41, // 0x41 = A
   (char)0x42, // 0x42 = B
   (char)0x43, // 0x43 = C
   (char)0x44, // 0x44 = D
   (char)0x45, // 0x45 = E
   (char)0x46, // 0x46 = F
   (char)0x47, // 0x47 = G
   (char)0x48, // 0x48 = H
   (char)0x49, // 0x49 = I
   (char)0x4A, // 0x4A = J
   (char)0x4B, // 0x4B = K
   (char)0x4C, // 0x4C = L
   (char)0x4D, // 0x4D = M
   (char)0x4E, // 0x4E = N
   (char)0x4F, // 0x4F = O
   (char)0x50, // 0x50 = P
   (char)0x51, // 0x51 = Q
   (char)0x52, // 0x52 = R
   (char)0x53, // 0x53 = S
   (char)0x54, // 0x54 = T
   (char)0x55, // 0x55 = U
   (char)0x56, // 0x56 = V
   (char)0x57, // 0x57 = W
   (char)0x58, // 0x58 = X
   (char)0x59, // 0x59 = Y
   (char)0x5A, // 0x5A = Z
   (char)0xC4, // 0x5B = Ä
   (char)0xD6, // 0x5C = Ö
   (char)0xD1, // 0x5D = Ñ
   (char)0xDC, // 0x5E = Ü
   (char)0xA7, // 0x5F = §
   (char)0xBF, // 0x60 = ¿
   (char)0x61, // 0x61 = a
   (char)0x62, // 0x62 = b
   (char)0x63, // 0x63 = c
   (char)0x64, // 0x64 = d
   (char)0x65, // 0x65 = e
   (char)0x66, // 0x66 = f
   (char)0x67, // 0x67 = g
   (char)0x68, // 0x68 = h
   (char)0x69, // 0x69 = i
   (char)0x6A, // 0x6A = j
   (char)0x6B, // 0x6B = k
   (char)0x6C, // 0x6C = l
   (char)0x6D, // 0x6D = m
   (char)0x6E, // 0x6E = n
   (char)0x6F, // 0x6F = o
   (char)0x70, // 0x70 = p
   (char)0x71, // 0x71 = q
   (char)0x72, // 0x72 = r
   (char)0x73, // 0x73 = s
   (char)0x74, // 0x74 = t
   (char)0x75, // 0x75 = u
   (char)0x76, // 0x76 = v
   (char)0x77, // 0x77 = w
   (char)0x78, // 0x78 = x
   (char)0x79, // 0x79 = y
   (char)0x7A, // 0x7A = z
   (char)0xE4, // 0x7B = ä
   (char)0xF6, // 0x7C = ö
   (char)0xF1, // 0x7D = ñ
   (char)0xFC, // 0x7E = ü
   (char)0xE0  // 0x7F = à
};


const char SMSConvUtil::ISOToGSM_table[] = {
   (char)0x20, // 0x00 = 
   (char)0x20, // 0x01 =  
   (char)0x20, // 0x02 =  
   (char)0x20, // 0x03 =  
   (char)0x20, // 0x04 =  
   (char)0x20, // 0x05 =  
   (char)0x20, // 0x06 =  
   (char)0x20, // 0x07 =  
   (char)0x20, // 0x08 =  
   (char)0x20, // 0x09 =  
   (char)0x0A, // 0x0A = \n
   (char)0x20, // 0x0B =  
   (char)0x20, // 0x0C =  
   (char)0x0D, // 0x0D = \r
   (char)0x20, // 0x0E =  
   (char)0x20, // 0x0F =  
   (char)0x20, // 0x10 =  
   (char)0x20, // 0x11 =  
   (char)0x20, // 0x12 =  
   (char)0x20, // 0x13 =  
   (char)0x20, // 0x14 =  
   (char)0x20, // 0x15 =  
   (char)0x20, // 0x16 =  
   (char)0x20, // 0x17 =  
   (char)0x20, // 0x18 =  
   (char)0x20, // 0x19 =  
   (char)0x20, // 0x1A =  
   (char)0x20, // 0x1B =  
   (char)0x20, // 0x1C =  
   (char)0x20, // 0x1D =  
   (char)0x20, // 0x1E =  
   (char)0x20, // 0x1F =  
   (char)0x20, // 0x20 =  
   (char)0x21, // 0x21 = !
   (char)0x22, // 0x22 = "
   (char)0x23, // 0x23 = #
   (char)0x02, // 0x24 = $
   (char)0x25, // 0x25 = %
   (char)0x26, // 0x26 = &
   (char)0x27, // 0x27 = '
   (char)0x28, // 0x28 = (
   (char)0x29, // 0x29 = )
   (char)0x2A, // 0x2A = *
   (char)0x2B, // 0x2B = +
   (char)0x2C, // 0x2C = ,
   (char)0x2D, // 0x2D = -
   (char)0x2E, // 0x2E = .
   (char)0x2F, // 0x2F = /
   (char)0x30, // 0x30 = 0
   (char)0x31, // 0x31 = 1
   (char)0x32, // 0x32 = 2
   (char)0x33, // 0x33 = 3
   (char)0x34, // 0x34 = 4
   (char)0x35, // 0x35 = 5
   (char)0x36, // 0x36 = 6
   (char)0x37, // 0x37 = 7
   (char)0x38, // 0x38 = 8
   (char)0x39, // 0x39 = 9
   (char)0x3A, // 0x3A = :
   (char)0x3B, // 0x3B = ;
   (char)0x3C, // 0x3C = <
   (char)0x3D, // 0x3D = =
   (char)0x3E, // 0x3E = >
   (char)0x3F, // 0x3F = ?
   (char)0x00, // 0x40 = @
   (char)0x41, // 0x41 = A
   (char)0x42, // 0x42 = B
   (char)0x43, // 0x43 = C
   (char)0x44, // 0x44 = D
   (char)0x45, // 0x45 = E
   (char)0x46, // 0x46 = F
   (char)0x47, // 0x47 = G
   (char)0x48, // 0x48 = H
   (char)0x49, // 0x49 = I
   (char)0x4A, // 0x4A = J
   (char)0x4B, // 0x4B = K
   (char)0x4C, // 0x4C = L
   (char)0x4D, // 0x4D = M
   (char)0x4E, // 0x4E = N
   (char)0x4F, // 0x4F = O
   (char)0x50, // 0x50 = P
   (char)0x51, // 0x51 = Q
   (char)0x52, // 0x52 = R
   (char)0x53, // 0x53 = S
   (char)0x54, // 0x54 = T
   (char)0x55, // 0x55 = U
   (char)0x56, // 0x56 = V
   (char)0x57, // 0x57 = W
   (char)0x58, // 0x58 = X
   (char)0x59, // 0x59 = Y
   (char)0x5A, // 0x5A = Z
   (char)0x20, // 0x5B =  
   (char)0x20, // 0x5C =  
   (char)0x20, // 0x5D =  
   (char)0x20, // 0x5E =  
   (char)0x11, // 0x5F = _ 
   (char)0x20, // 0x60 =  
   (char)0x61, // 0x61 = a
   (char)0x62, // 0x62 = b
   (char)0x63, // 0x63 = c
   (char)0x64, // 0x64 = d
   (char)0x65, // 0x65 = e
   (char)0x66, // 0x66 = f
   (char)0x67, // 0x67 = g
   (char)0x68, // 0x68 = h
   (char)0x69, // 0x69 = i
   (char)0x6A, // 0x6A = j
   (char)0x6B, // 0x6B = k
   (char)0x6C, // 0x6C = l
   (char)0x6D, // 0x6D = m
   (char)0x6E, // 0x6E = n
   (char)0x6F, // 0x6F = o
   (char)0x70, // 0x70 = p
   (char)0x71, // 0x71 = q
   (char)0x72, // 0x72 = r
   (char)0x73, // 0x73 = s
   (char)0x74, // 0x74 = t
   (char)0x75, // 0x75 = u
   (char)0x76, // 0x76 = v
   (char)0x77, // 0x77 = w
   (char)0x78, // 0x78 = x
   (char)0x79, // 0x79 = y
   (char)0x7A, // 0x7A = z
   (char)0x20, // 0x7B =  
   (char)0x20, // 0x7C =  
   (char)0x20, // 0x7D =  
   (char)0x20, // 0x7E =  
   (char)0x20, // 0x7F =  
   (char)0x20, // 0x80 =  
   (char)0x20, // 0x81 =  
   (char)0x20, // 0x82 =  
   (char)0x20, // 0x83 =  
   (char)0x20, // 0x84 =  
   (char)0x20, // 0x85 =  
   (char)0x20, // 0x86 =  
   (char)0x20, // 0x87 =  
   (char)0x20, // 0x88 =  
   (char)0x20, // 0x89 =  
   (char)0x20, // 0x8A =  
   (char)0x20, // 0x8B =  
   (char)0x20, // 0x8C =  
   (char)0x20, // 0x8D =  
   (char)0x20, // 0x8E =  
   (char)0x20, // 0x8F =  
   (char)0x20, // 0x90 =  
   (char)0x20, // 0x91 =  
   (char)0x20, // 0x92 =  
   (char)0x20, // 0x93 =  
   (char)0x20, // 0x94 =  
   (char)0x20, // 0x95 =  
   (char)0x20, // 0x96 =  
   (char)0x20, // 0x97 =  
   (char)0x20, // 0x98 =  
   (char)0x20, // 0x99 =  
   (char)0x20, // 0x9A =  
   (char)0x20, // 0x9B =  
   (char)0x20, // 0x9C =  
   (char)0x20, // 0x9D =  
   (char)0x20, // 0x9E =  
   (char)0x20, // 0x9F =  
   (char)0x20, // 0xA0 =  
   (char)0x40, // 0xA1 = ¡
   (char)0x20, // 0xA2 =  
   (char)0x01, // 0xA3 = £
   (char)0x24, // 0xA4 = ¤
   (char)0x20, // 0xA5 =  
   (char)0x20, // 0xA6 =  
   (char)0x5F, // 0xA7 = §
   (char)0x20, // 0xA8 =  
   (char)0x20, // 0xA9 =  
   (char)0x20, // 0xAA =  
   (char)0x20, // 0xAB =  
   (char)0x20, // 0xAC =  
   (char)0x20, // 0xAD =  
   (char)0x20, // 0xAE =  
   (char)0x20, // 0xAF =  
   (char)0x20, // 0xB0 =  
   (char)0x20, // 0xB1 =  
   (char)0x20, // 0xB2 =  
   (char)0x20, // 0xB3 =  
   (char)0x20, // 0xB4 =  
   (char)0x20, // 0xB5 =  
   (char)0x20, // 0xB6 =  
   (char)0x20, // 0xB7 =  
   (char)0x20, // 0xB8 =  
   (char)0x20, // 0xB9 =  
   (char)0x20, // 0xBA =  
   (char)0x20, // 0xBB =  
   (char)0x20, // 0xBC =  
   (char)0x20, // 0xBD =  
   (char)0x20, // 0xBE =  
   (char)0x60, // 0xBF = ¿
   (char)0x20, // 0xC0 =  
   (char)0x20, // 0xC1 =  
   (char)0x20, // 0xC2 =  
   (char)0x20, // 0xC3 =  
   (char)0x5B, // 0xC4 = Ä
   (char)0x0E, // 0xC5 = Å
   (char)0x1C, // 0xC6 = Æ
   (char)0x09, // 0xC7 = Ç
   (char)0x20, // 0xC8 =  
   (char)0x1F, // 0xC9 = É
   (char)0x20, // 0xCA =  
   (char)0x20, // 0xCB =  
   (char)0x20, // 0xCC =  
   (char)0x20, // 0xCD =  
   (char)0x20, // 0xCE =  
   (char)0x20, // 0xCF =  
   (char)0x20, // 0xD0 =  
   (char)0x5D, // 0xD1 = Ñ
   (char)0x20, // 0xD2 =  
   (char)0x20, // 0xD3 =  
   (char)0x20, // 0xD4 =  
   (char)0x20, // 0xD5 =  
   (char)0x5C, // 0xD6 = Ö
   (char)0x20, // 0xD7 =  
   (char)0x0B, // 0xD8 = Ø
   (char)0x20, // 0xD9 =  
   (char)0x20, // 0xDA =  
   (char)0x20, // 0xDB =  
   (char)0x5E, // 0xDC = Ü
   (char)0x20, // 0xDD =  
   (char)0x20, // 0xDE =  
   (char)0x1E, // 0xDF = ß
   (char)0x7F, // 0xE0 = à
   (char)0x20, // 0xE1 =  
   (char)0x20, // 0xE2 =  
   (char)0x20, // 0xE3 =  
   (char)0x7B, // 0xE4 = ä
   (char)0x0F, // 0xE5 = å
   (char)0x1D, // 0xE6 = æ
   (char)0x20, // 0xE7 =  
   (char)0x04, // 0xE8 = è
   (char)0x05, // 0xE9 = é
   (char)0x20, // 0xEA =  
   (char)0x20, // 0xEB =  
   (char)0x07, // 0xEC = ì
   (char)0x20, // 0xED =  
   (char)0x20, // 0xEE =  
   (char)0x20, // 0xEF =  
   (char)0x20, // 0xF0 =  
   (char)0x7D, // 0xF1 = ñ
   (char)0x08, // 0xF2 = ò
   (char)0x20, // 0xF3 =  
   (char)0x20, // 0xF4 =  
   (char)0x20, // 0xF5 =  
   (char)0x7C, // 0xF6 = ö
   (char)0x20, // 0xF7 =  
   (char)0x0C, // 0xF8 = ø
   (char)0x06, // 0xF9 = ù
   (char)0x20, // 0xFA =  
   (char)0x20, // 0xFB =  
   (char)0x7E, // 0xFC = ü
   (char)0x20, // 0xFD =  
   (char)0x20, // 0xFE =  
   (char)0x20  // 0xFF =  
};

const char SMSConvUtil::GSMEscapeToISO_table[] = {
   (char)0x20, // 0x00 = @
   (char)0x20, // 0x01 = £
   (char)0x20, // 0x02 = $
   (char)0x20, // 0x03 = ¥ 
   (char)0x20, // 0x04 = è
   (char)0x20, // 0x05 = é
   (char)0x20, // 0x06 = ù
   (char)0x20, // 0x07 = ì
   (char)0x20, // 0x08 = ò
   (char)0x20, // 0x09 = Ç
   (char)0x20, // 0x0A = 
   (char)0x20, // 0x0B = Ø
   (char)0x20, // 0x0C = ø
   (char)0x20, // 0x0D = 
   (char)0x20, // 0x0E = Å
   (char)0x20, // 0x0F = å
   (char)0x20, // 0x10 =  
   (char)0x20, // 0x11 = _
   (char)0x20, // 0x12 =  
   (char)0x20, // 0x13 =  
   (char)0x5E, // 0x14 =  
   (char)0x20, // 0x15 =  
   (char)0x20, // 0x16 =  
   (char)0x20, // 0x17 =  
   (char)0x20, // 0x18 =  
   (char)0x20, // 0x19 =  
   (char)0x20, // 0x1A =  
   (char)0x20, // 0x1B =  
   (char)0x20, // 0x1C = Æ
   (char)0x20, // 0x1D = æ
   (char)0x20, // 0x1E = ß
   (char)0x20, // 0x1F = É
   (char)0x20, // 0x20 =  
   (char)0x20, // 0x21 = !
   (char)0x20, // 0x22 = "
   (char)0x20, // 0x23 = #
   (char)0x20, // 0x24 = ¤
   (char)0x20, // 0x25 = %
   (char)0x20, // 0x26 = &
   (char)0x20, // 0x27 = '
   (char)0x7B, // 0x28 = (
   (char)0x7D, // 0x29 = )
   (char)0x20, // 0x2A = *
   (char)0x20, // 0x2B = +
   (char)0x20, // 0x2C = ,
   (char)0x20, // 0x2D = -
   (char)0x20, // 0x2E = .
   (char)0x5C, // 0x2F = /
   (char)0x20, // 0x30 = 0
   (char)0x20, // 0x31 = 1
   (char)0x20, // 0x32 = 2
   (char)0x20, // 0x33 = 3
   (char)0x20, // 0x34 = 4
   (char)0x20, // 0x35 = 5
   (char)0x20, // 0x36 = 6
   (char)0x20, // 0x37 = 7
   (char)0x20, // 0x38 = 8
   (char)0x20, // 0x39 = 9
   (char)0x20, // 0x3A = :
   (char)0x20, // 0x3B = ;
   (char)0x5B, // 0x3C = <
   (char)0x7E, // 0x3D = =
   (char)0x5D, // 0x3E = >
   (char)0x20, // 0x3F = ?
   (char)0x7C, // 0x40 = ¡
   (char)0x20, // 0x41 = A
   (char)0x20, // 0x42 = B
   (char)0x20, // 0x43 = C
   (char)0x20, // 0x44 = D
   (char)0x20, // 0x45 = E
   (char)0x20, // 0x46 = F
   (char)0x20, // 0x47 = G
   (char)0x20, // 0x48 = H
   (char)0x20, // 0x49 = I
   (char)0x20, // 0x4A = J
   (char)0x20, // 0x4B = K
   (char)0x20, // 0x4C = L
   (char)0x20, // 0x4D = M
   (char)0x20, // 0x4E = N
   (char)0x20, // 0x4F = O
   (char)0x20, // 0x50 = P
   (char)0x20, // 0x51 = Q
   (char)0x20, // 0x52 = R
   (char)0x20, // 0x53 = S
   (char)0x20, // 0x54 = T
   (char)0x20, // 0x55 = U
   (char)0x20, // 0x56 = V
   (char)0x20, // 0x57 = W
   (char)0x20, // 0x58 = X
   (char)0x20, // 0x59 = Y
   (char)0x20, // 0x5A = Z
   (char)0x20, // 0x5B = Ä
   (char)0x20, // 0x5C = Ö
   (char)0x20, // 0x5D = Ñ
   (char)0x20, // 0x5E = Ü
   (char)0x20, // 0x5F = §
   (char)0x20, // 0x60 = ¿
   (char)0x20, // 0x61 = a
   (char)0x20, // 0x62 = b
   (char)0x20, // 0x63 = c
   (char)0x20, // 0x64 = d
   (char)0xA5, // 0x65 = e
   (char)0x20, // 0x66 = f
   (char)0x20, // 0x67 = g
   (char)0x20, // 0x68 = h
   (char)0x20, // 0x69 = i
   (char)0x20, // 0x6A = j
   (char)0x20, // 0x6B = k
   (char)0x20, // 0x6C = l
   (char)0x20, // 0x6D = m
   (char)0x20, // 0x6E = n
   (char)0x20, // 0x6F = o
   (char)0x20, // 0x70 = p
   (char)0x20, // 0x71 = q
   (char)0x20, // 0x72 = r
   (char)0x20, // 0x73 = s
   (char)0x20, // 0x74 = t
   (char)0x20, // 0x75 = u
   (char)0x20, // 0x76 = v
   (char)0x20, // 0x77 = w
   (char)0x20, // 0x78 = x
   (char)0x20, // 0x79 = y
   (char)0x20, // 0x7A = z
   (char)0x20, // 0x7B = ä
   (char)0x20, // 0x7C = ö
   (char)0x20, // 0x7D = ñ
   (char)0x20, // 0x7E = ü
   (char)0x20  // 0x7F = à
};


const char SMSConvUtil::ISOToGSMEscape_table[] = {
   (char)0x20, // 0x00 = 
   (char)0x20, // 0x01 =  
   (char)0x20, // 0x02 =  
   (char)0x20, // 0x03 =  
   (char)0x20, // 0x04 =  
   (char)0x20, // 0x05 =  
   (char)0x20, // 0x06 =  
   (char)0x20, // 0x07 =  
   (char)0x20, // 0x08 =  
   (char)0x20, // 0x09 =  
   (char)0x20, // 0x0A = \n
   (char)0x20, // 0x0B =  
   (char)0x20, // 0x0C =  
   (char)0x20, // 0x0D = \r
   (char)0x20, // 0x0E =  
   (char)0x20, // 0x0F =  
   (char)0x20, // 0x10 =  
   (char)0x20, // 0x11 =  
   (char)0x20, // 0x12 =  
   (char)0x20, // 0x13 =  
   (char)0x20, // 0x14 =  
   (char)0x20, // 0x15 =  
   (char)0x20, // 0x16 =  
   (char)0x20, // 0x17 =  
   (char)0x20, // 0x18 =  
   (char)0x20, // 0x19 =  
   (char)0x20, // 0x1A =  
   (char)0x20, // 0x1B =  
   (char)0x20, // 0x1C =  
   (char)0x20, // 0x1D =  
   (char)0x20, // 0x1E =  
   (char)0x20, // 0x1F =  
   (char)0x20, // 0x20 =  
   (char)0x20, // 0x21 = !
   (char)0x20, // 0x22 = "
   (char)0x20, // 0x23 = #
   (char)0x20, // 0x24 = $
   (char)0x20, // 0x25 = %
   (char)0x20, // 0x26 = &
   (char)0x20, // 0x27 = '
   (char)0x20, // 0x28 = (
   (char)0x20, // 0x29 = )
   (char)0x20, // 0x2A = *
   (char)0x20, // 0x2B = +
   (char)0x20, // 0x2C = ,
   (char)0x20, // 0x2D = -
   (char)0x20, // 0x2E = .
   (char)0x20, // 0x2F = /
   (char)0x20, // 0x30 = 0
   (char)0x20, // 0x31 = 1
   (char)0x20, // 0x32 = 2
   (char)0x20, // 0x33 = 3
   (char)0x20, // 0x34 = 4
   (char)0x20, // 0x35 = 5
   (char)0x20, // 0x36 = 6
   (char)0x20, // 0x37 = 7
   (char)0x20, // 0x38 = 8
   (char)0x20, // 0x39 = 9
   (char)0x20, // 0x3A = :
   (char)0x20, // 0x3B = ;
   (char)0x20, // 0x3C = <
   (char)0x20, // 0x3D = =
   (char)0x20, // 0x3E = >
   (char)0x20, // 0x3F = ?
   (char)0x20, // 0x40 = @
   (char)0x20, // 0x41 = A
   (char)0x20, // 0x42 = B
   (char)0x20, // 0x43 = C
   (char)0x20, // 0x44 = D
   (char)0x20, // 0x45 = E
   (char)0x20, // 0x46 = F
   (char)0x20, // 0x47 = G
   (char)0x20, // 0x48 = H
   (char)0x20, // 0x49 = I
   (char)0x20, // 0x4A = J
   (char)0x20, // 0x4B = K
   (char)0x20, // 0x4C = L
   (char)0x20, // 0x4D = M
   (char)0x20, // 0x4E = N
   (char)0x20, // 0x4F = O
   (char)0x20, // 0x50 = P
   (char)0x20, // 0x51 = Q
   (char)0x20, // 0x52 = R
   (char)0x20, // 0x53 = S
   (char)0x20, // 0x54 = T
   (char)0x20, // 0x55 = U
   (char)0x20, // 0x56 = V
   (char)0x20, // 0x57 = W
   (char)0x20, // 0x58 = X
   (char)0x20, // 0x59 = Y
   (char)0x20, // 0x5A = Z
   (char)0x3C, // 0x5B =  
   (char)0x2F, // 0x5C =  
   (char)0x3E, // 0x5D =  
   (char)0x14, // 0x5E =  
   (char)0x20, // 0x5F = _ 
   (char)0x20, // 0x60 =  
   (char)0x20, // 0x61 = a
   (char)0x20, // 0x62 = b
   (char)0x20, // 0x63 = c
   (char)0x20, // 0x64 = d
   (char)0x20, // 0x65 = e
   (char)0x20, // 0x66 = f
   (char)0x20, // 0x67 = g
   (char)0x20, // 0x68 = h
   (char)0x20, // 0x69 = i
   (char)0x20, // 0x6A = j
   (char)0x20, // 0x6B = k
   (char)0x20, // 0x6C = l
   (char)0x20, // 0x6D = m
   (char)0x20, // 0x6E = n
   (char)0x20, // 0x6F = o
   (char)0x20, // 0x70 = p
   (char)0x20, // 0x71 = q
   (char)0x20, // 0x72 = r
   (char)0x20, // 0x73 = s
   (char)0x20, // 0x74 = t
   (char)0x20, // 0x75 = u
   (char)0x20, // 0x76 = v
   (char)0x20, // 0x77 = w
   (char)0x20, // 0x78 = x
   (char)0x20, // 0x79 = y
   (char)0x20, // 0x7A = z
   (char)0x28, // 0x7B =  
   (char)0x40, // 0x7C =  
   (char)0x29, // 0x7D =  
   (char)0x3D, // 0x7E =  
   (char)0x20, // 0x7F =  
   (char)0x20, // 0x80 =  
   (char)0x20, // 0x81 =  
   (char)0x20, // 0x82 =  
   (char)0x20, // 0x83 =  
   (char)0x20, // 0x84 =  
   (char)0x20, // 0x85 =  
   (char)0x20, // 0x86 =  
   (char)0x20, // 0x87 =  
   (char)0x20, // 0x88 =  
   (char)0x20, // 0x89 =  
   (char)0x20, // 0x8A =  
   (char)0x20, // 0x8B =  
   (char)0x20, // 0x8C =  
   (char)0x20, // 0x8D =  
   (char)0x20, // 0x8E =  
   (char)0x20, // 0x8F =  
   (char)0x20, // 0x90 =  
   (char)0x20, // 0x91 =  
   (char)0x20, // 0x92 =  
   (char)0x20, // 0x93 =  
   (char)0x20, // 0x94 =  
   (char)0x20, // 0x95 =  
   (char)0x20, // 0x96 =  
   (char)0x20, // 0x97 =  
   (char)0x20, // 0x98 =  
   (char)0x20, // 0x99 =  
   (char)0x20, // 0x9A =  
   (char)0x20, // 0x9B =  
   (char)0x20, // 0x9C =  
   (char)0x20, // 0x9D =  
   (char)0x20, // 0x9E =  
   (char)0x20, // 0x9F =  
   (char)0x20, // 0xA0 =  
   (char)0x20, // 0xA1 = ¡
   (char)0x20, // 0xA2 =  
   (char)0x20, // 0xA3 = £
   (char)0x20, // 0xA4 = ¤
   (char)0x65, // 0xA5 =  
   (char)0x20, // 0xA6 =  
   (char)0x20, // 0xA7 = §
   (char)0x20, // 0xA8 =  
   (char)0x20, // 0xA9 =  
   (char)0x20, // 0xAA =  
   (char)0x20, // 0xAB =  
   (char)0x20, // 0xAC =  
   (char)0x20, // 0xAD =  
   (char)0x20, // 0xAE =  
   (char)0x20, // 0xAF =  
   (char)0x20, // 0xB0 =  
   (char)0x20, // 0xB1 =  
   (char)0x20, // 0xB2 =  
   (char)0x20, // 0xB3 =  
   (char)0x20, // 0xB4 =  
   (char)0x20, // 0xB5 =  
   (char)0x20, // 0xB6 =  
   (char)0x20, // 0xB7 =  
   (char)0x20, // 0xB8 =  
   (char)0x20, // 0xB9 =  
   (char)0x20, // 0xBA =  
   (char)0x20, // 0xBB =  
   (char)0x20, // 0xBC =  
   (char)0x20, // 0xBD =  
   (char)0x20, // 0xBE =  
   (char)0x20, // 0xBF = ¿
   (char)0x20, // 0xC0 =  
   (char)0x20, // 0xC1 =  
   (char)0x20, // 0xC2 =  
   (char)0x20, // 0xC3 =  
   (char)0x20, // 0xC4 = Ä
   (char)0x20, // 0xC5 = Å
   (char)0x20, // 0xC6 = Æ
   (char)0x20, // 0xC7 = Ç
   (char)0x20, // 0xC8 =  
   (char)0x20, // 0xC9 = É
   (char)0x20, // 0xCA =  
   (char)0x20, // 0xCB =  
   (char)0x20, // 0xCC =  
   (char)0x20, // 0xCD =  
   (char)0x20, // 0xCE =  
   (char)0x20, // 0xCF =  
   (char)0x20, // 0xD0 =  
   (char)0x20, // 0xD1 = Ñ
   (char)0x20, // 0xD2 =  
   (char)0x20, // 0xD3 =  
   (char)0x20, // 0xD4 =  
   (char)0x20, // 0xD5 =  
   (char)0x20, // 0xD6 = Ö
   (char)0x20, // 0xD7 =  
   (char)0x20, // 0xD8 = Ø
   (char)0x20, // 0xD9 =  
   (char)0x20, // 0xDA =  
   (char)0x20, // 0xDB =  
   (char)0x20, // 0xDC = Ü
   (char)0x20, // 0xDD =  
   (char)0x20, // 0xDE =  
   (char)0x20, // 0xDF = ß
   (char)0x20, // 0xE0 = à
   (char)0x20, // 0xE1 =  
   (char)0x20, // 0xE2 =  
   (char)0x20, // 0xE3 =  
   (char)0x20, // 0xE4 = ä
   (char)0x20, // 0xE5 = å
   (char)0x20, // 0xE6 = æ
   (char)0x20, // 0xE7 =  
   (char)0x20, // 0xE8 = è
   (char)0x20, // 0xE9 = é
   (char)0x20, // 0xEA =  
   (char)0x20, // 0xEB =  
   (char)0x20, // 0xEC = ì
   (char)0x20, // 0xED =  
   (char)0x20, // 0xEE =  
   (char)0x20, // 0xEF =  
   (char)0x20, // 0xF0 =  
   (char)0x20, // 0xF1 = ñ
   (char)0x20, // 0xF2 = ò
   (char)0x20, // 0xF3 =  
   (char)0x20, // 0xF4 =  
   (char)0x20, // 0xF5 =  
   (char)0x20, // 0xF6 = ö
   (char)0x20, // 0xF7 =  
   (char)0x20, // 0xF8 = ø
   (char)0x20, // 0xF9 = ù
   (char)0x20, // 0xFA =  
   (char)0x20, // 0xFB =  
   (char)0x20, // 0xFC = ü
   (char)0x20, // 0xFD =  
   (char)0x20, // 0xFE =  
   (char)0x20  // 0xFF =  
};
   
