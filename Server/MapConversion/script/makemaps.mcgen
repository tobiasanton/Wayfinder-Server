#!/bin/sh -x
#
# This script has two different functionalities
# - generate multi individual countries 
# - merge map generation combining the individual countries into one map set


# BASEGENFILESPATH 
# genfiles is the base directory where all setting files for map generation
# is stored
# Se help text in the makemaps script about what is found in BASEGENFILESPATH
#
# Update it to point to the full path of where you create the BASEGENFILESPATH
#BASEGENFILESPATH="fullpath/genfiles";
#BASEGENFILESPATH="."
BASEGENFILESPATH=`echo $(dirname $(readlink -f ${BASH_SOURCE[0]})) | sed -e "s/\/script$//"`


# Fill in where the MC2 repo is located, so you can checkout the latest
# version of the extradata.sh file to be used in this script.
# Else the version in the genfiles script-dir is used.
MC2REPO="";



# Script control.
# Comment out any variable you want to be false or use option
noMapGen=""
onlySuper=""
generateCountries="true";
filterMaps="true"
cntrFirstGen="";
dist2="";
mapSetCount="";
dynamicED=""; #false
fromM3="";
noCache="";
noM3="";
rebuildIdx="";
stitchMerge="";
no_dist="";


# include help functions used in this makemaps script
source ${BASEGENFILESPATH}/script/mfunctions.sh

# Print the commandline to the log.
commandLine="$0";
for i; do
    commandLine="${commandLine} $i";
done
echo "Command line: ${commandLine}";


# Read input arguments.
argNbr=0;  # Index of non-flagged parameter.
pos=1;     # Corresponds to index of positional parameter.
flaggedArg=""; #false
for i; do 
   case $i in
      -h) echo "Usage: "
          echo "makemaps.mcgen_europe OPTIONS"
          echo ""
          echo "Options:"
          echo "-dummyrun"
          echo "        Makes the script run in dummy-mode"
          echo "-countries COUNTRIES"
          echo "        Possible values of COUNTRIES:"
          echo "            myCountries (edit manually to wanted countries)"
          echo "            east_world  (for east world merge generation)"
          echo "            west_world  (for west world merge generation)"
          echo "            wf_world    (for multi country generation listing"
          echo "                         all available countries in the "
          echo "                         wayfinder world)"
          echo ""
          echo "-noMerge"
          echo "        Makes the script do the distributed multi country"
          echo "        generation, and stop when it is done, i.e. no merge"
          echo "        map generation."
          echo "-mapRelease MAPRELEASE"
          echo "        The map release for multi country generation"
          echo "        E.g. TA_2009_09."
          echo "-countryGenComputers COMPUTERS"
          echo "          For multi country generation these computers are used."
          echo "          The top country in the COUNTRYLIST (from -countries option)"
          echo "          is started on the first computer, the next country on"
          echo "          the second computer, etc. When a country generation is"
          echo "          next country in the list is started, etc until all "
          echo "          countries in the COUNTRYLIST have been generated."
          echo "          Give the computers within \"-chars."
          echo "-noDist"
          echo "          No task distribution, use the current computer. "
          echo "          Not to be combined with other -dist options. "
          echo "-dist2"
          echo "          Using two processors when distributing country "
          echo "          generation for each of the countries in a multi "
          echo "          country generation."
          echo "-cntrFirstGen"
          echo "          Running multi country first gen. Which means "
          echo "          no extradata (map corrections), filtering or "
          echo "          WASP for countries."
          echo ""
          echo "-onlyMerge"
          echo "        Makes the script not generate countries, but only"
          echo "        merge them. The merge will be run on localhost."
          echo "-onlySuper"
          echo "        Makes the script start merge map generation with "
          echo "        creation of the super overview maps (overview "
          echo "        level 2 maps)."
          echo "-rebuildIdx"
          echo "        Only rebuilds index.db from created maps."
          echo "-noMapGen"
          echo "        Makes the script not generate any maps in map merge"
          echo "        generation. Use if "
          echo "        you want to, on a merge, do dynamic, filter maps, and "
          echo "        finally create m3 maps and search&route map cache."
          echo ""
          echo "-countriesPath COUNTRIESPATH"
          echo "        The directory where the individual countries are"
          echo "        stored, used both in multi country map generation"
          echo "        and merge map generation";
          echo "-mergePath MERGEPATH"
          echo "        The directory where the merged maps are stored."
          echo "-binPath BINPATH"
          echo "        The directory where binaries are fetched from."
          echo ""
          echo "-dynamicED"
          echo "          Changes in WASP POI db and extradata db "
          echo "          (map corrections) since "
          echo "          the country maps used in merge were created,"
          echo "          will be added to the merged maps."
          echo "-stitchMerge"
          echo "          Makes the generation stop before border stitching"
          echo "          is resolved. Useful when you need to do stitching"
          echo "          between two countries, to have the same situation,"
          echo "          with candidate nodes for stitching in the "
          echo "          neighbouring maps as you will when to resolve "
          echo "          stitching."
          echo "-noFilt"
          echo "          No final filtering of the merged maps"
          echo "-filtComputers COMPUTERS"
          echo "          When this one is used, these computers are used"
          echo "          instead of the merge computer."
          echo "          Give the computers within \"-chars."
          echo "          The final filtering will be distributed on "
          echo "          these computers."
          echo "-mc2Dir"  
          echo "          The name of the directory where to store m3 and "
          echo "          search and route cache maps, subdir in MERGEPATH";
          echo "-fromM3   Starts merge map generation from M3 maps creation."
          echo "          Give -mapSet and -mc2Dir options."
          echo "          You must stand in the directory with the maps when"
          echo "          using this option."
          echo "-noCache  No search and route maps are created";
          echo "-noM3     No m3 maps are created";
          echo "-mapSet   Set the intended map set number of the maps (0,1,..)."
          echo "          Used for route and search map cache. Overrides any "
          echo "          mapSet defined from -countries option."
          echo ""
          echo "-createMapVerByCountryFile"
          echo "          Tool for creating a help file for merge map gen."
          echo "          A sorted file with all countires and their map"
          echo "          versions. Give also options -countriesPath and"
          echo "          -countries"
          echo "-crbFile CRBFILE"
          echo "          Point to a special copyright box XML file to use"
          echo "          for a merge. Typically used if we have a part-"
          echo "          -of-the-world merge generation (not complete "
          echo "          east or west)"
          echo "";
          exit;;
      -dummyrun) dummyrun="true";;
      -noMapGen) noMapGen="true";
                 generateCountries="";;
      -onlySuper) onlySuper="true";
                  generateCountries="";;
      -onlyMerge) generateCountries="";;
      -noMerge) noMerge="true";;
      -noFilt) filterMaps="";;
      -cntrFirstGen) cntrFirstGen="true";;
      -noDist) no_dist="true";;
      -dist2) dist2="true";;
      -dynamicED) dynamicED="true";;
      -stitchMerge) stitchMerge="true";;
      -fromM3) fromM3="true";
               noMerge="true";
               noMapGen="true";
               generateCountries="";;
      -noM3) noM3="true";;
      -noCache) noCache="true";;
      -createMapVerByCountryFile) createMapVerByCountryFile="true";;
      -crbFile) inArgNbr=$[pos+1];
           eval CRBFILE_ARG=$\{`echo ${inArgNbr}`\};
           flaggedArg="true";;
      -rebuildIdx) rebuildIdx="true"; 
           # Manifistated mainly by other script control parameters.
           generateCountries=""; 
           onlySuper="true";
           filterMaps="";
           dynamicED="";
           noM3="true";
           noCache="true";;
      -countries) inArgNbr=$[pos+1];
           eval COUNTRIES_ARG=$\{`echo ${inArgNbr}`\};
           flaggedArg="true";;
      -countriesPath) inArgNbr=$[pos+1];
           eval COUNTRIESPATH_ARG=$\{`echo ${inArgNbr}`\};
           flaggedArg="true";;
      -mergePath) inArgNbr=$[pos+1];
           eval  MERGEPATH_ARG=$\{`echo ${inArgNbr}`\};
           flaggedArg="true";;
      -filtComputers) inArgNbr=$[pos+1];
           eval  FILTCMP_ARG=$\{`echo ${inArgNbr}`\};
           flaggedArg="true";;
      -countryGenComputers) inArgNbr=$[pos+1];
           eval  COUNTRYGENCMP_ARG=$\{`echo ${inArgNbr}`\};
           flaggedArg="true";;
      -binPath) inArgNbr=$[pos+1];
           eval BINPATH_ARG=$\{`echo ${inArgNbr}`\};
           flaggedArg="true";;
      -mapRelease) inArgNbr=$[pos+1];
           eval MAP_RELEASE_ARG=$\{`echo ${inArgNbr}`\};
           flaggedArg="true";;
      -mc2Dir) inArgNbr=$[pos+1];
           eval MC2DIR=$\{`echo ${inArgNbr}`\};
           flaggedArg="true";;
      -mapSet) inArgNbr=$[pos+1];
           eval mapSetCountArg=$\{`echo ${inArgNbr}`\};
           flaggedArg="true";;
      -*) echo "Invalid option $i"; exit 1;;
      *) if [ ${flaggedArg} ]; then
           flaggedArg=""; #false
         else
            eval arg${argNbr}="$i";
            argNbr=$[argNbr+1]
         fi;;
   esac
   pos=$[pos+1];
done

if [ "$arg0" ]; then
    echo "Got an non-option argument. Something wrong with options values.";
    echo "Have you given more than one value to some option?";
    exit 1;
fi


echo ""
echo `date +"%Y%m%d %T"`" Start.";
echo ""

##################################################################
##################################################################
# Verify script parameters, so we have all we need


# The map release for multi-country map generation.
if [ ${MAP_RELEASE_ARG} ]; then
    mapRelease=${MAP_RELEASE_ARG};
fi
if [ ! ${mapRelease} ]; then
    if [ ${generateCountries} ]; then
        echo "Country generation wanted but no map release given. Exit."
        exit 1;
    fi
fi

# This is paths from where to fetch binaries for the map generation.
if [ "${BINPATH_ARG}" ]; then
    pushd ${BINPATH_ARG} > /dev/null;
    chk_res
    BINPATH=`pwd`;
    popd > /dev/null;
else
   if [ ! "$fromM3" ]; then
      echo "Need to give -binPath arg"
      exit 1;
   fi
fi
if [ ! -d $BINPATH ]; then
    echo "Bin path directory does not exist, exits!"
    echo "BINPATH: $BINPATH";
    exit 1;
fi

# This is where the country maps are stored in multi country generation
# and where to find countries for input to merge map generation
COUNTRIESPATH=""
if [ "${COUNTRIESPATH_ARG}" ]; then
   pushd ${COUNTRIESPATH_ARG} > /dev/null;
   chk_res
   COUNTRIESPATH=`pwd`;
   popd > /dev/null;
else
   if [ ! "$fromM3" ]; then
      echo "Missing -countriesPath option, exits";
      exit 1;
   fi
fi
if [ ! -d $COUNTRIESPATH ]; then
   echo "Countries path directory does not exist, exits!"
   echo "COUNTRIESPATH: $COUNTRIESPATH";
   exit 1;
fi

# This is where the map merge generation is done.
if [ "${MERGEPATH_ARG}" ]; then
    pushd ${MERGEPATH_ARG} >& /dev/null;
    if [ $? = 0 ]; then
        MERGEPATH=`pwd`
        popd > /dev/null;
    else
        # Could not find the path on this computer.
        # We will test this from the merge computer later.
        MERGEPATH="${MERGEPATH_ARG}"
    fi
else
    if [ ! "${noMerge}" ]; then
        echo "No merge path set. Exits!"
        exit 1;
    fi
fi

if [ "${FILTCMP_ARG}" ]; then
    FILT_COMPUTERS="${FILTCMP_ARG}";
else
   if [ ! "${noMerge}" ]; then
      if [ "${filterMaps}" ]; then
         echo "No filt computer set. Exit!"
         exit 1;
      fi
   fi
fi

if [ "${COUNTRYGENCMP_ARG}" ]; then
    COUNTRYGEN_COMPUTERS="${COUNTRYGENCMP_ARG}";
else
   if [ ${generateCountries} ]; then
      echo "No multiCountryComputer option given for county generation. Exit."
      exit 1;
   fi
fi


if [ ! "$MC2DIR" ]; then
    if [ \( ! "${noMerge}" \) -a \( ! "${rebuildIdx}" \) ]; then
        echo "No -mc2Dir option set. Needed when merging, exits";
        exit 1;
    fi
fi

if [ "$fromM3" ]; then
   if [ ! "$mapSetCountArg" ]; then
      echo "No -mapSet option set. Needed for -fromM3, exits";
      exit 1;
   fi
fi


if [ "$CRBFILE_ARG" ]; then
   echo "Copyright box XML file to use from option $CRBFILE_ARG"
   CRB_FILE="$CRBFILE_ARG";
   if [ ! -e "$CRB_FILE" ]; then
      echo "Copyright box XML file from option missing, exits!";
      echo "     $CRB_FILE";
      exit 1;
   fi
fi

FILTERSCRIPT="${BASEGENFILESPATH}/script/filterMergedMaps.sh"
if [ "${filterMaps}" ]; then
   if [ ! -e "$FILTERSCRIPT" ]; then
      echo "The script for filtering maps missing, exits!";
      echo "     $FILTERSCRIPT";
      exit 1;
   fi
fi


# This will happen:
if [ "${generateCountries}" ]; then
   echo "Will do multi country generation in "
   echo "   COUNTRIESPATH: $COUNTRIESPATH";
   if [ "$cntrFirstGen" ]; then
      echo "   will run multi first gen, with after_mapDataExtr backup"
   else
      echo "   will run multi second gen"
   fi
   echo "   on computers: $COUNTRYGEN_COMPUTERS";
else
   echo "Will do merge map generation"
   if [ $fromM3 ]; then
      echo "   will only do m3 and search/route caches"
   else
      echo "   countries COUNTRIESPATH: $COUNTRIESPATH";
      echo "   merge in  MERGEPATH:     $MERGEPATH";
      if [ $stitchMerge ]; then
         echo "   will abort before resolving border stitching"
      else 
         if [ $onlySuper ]; then
            echo "   starting with super overview map creation"
         fi
         if [ $noMapGen ]; then
            echo "   running noMapGen, will only do dynamic, filtering maps, "
            echo "   and create m3 and search&route maps"
         fi
         if [ "${filterMaps}" ]; then
            echo "   will filter maps"
         else
            echo "   no filtering of maps"
         fi
         if [ $dynamicED ]; then
            echo "   will do dynamic WASPing and map corrections"
         fi
      fi
   fi
fi


DTDPATH="$BASEGENFILESPATH/xml"
REGIONSPATH="$BASEGENFILESPATH/xml"
MAPSUPNAMESPATH="$BASEGENFILESPATH/xml"
RUNPATH=`pwd`;
LOGPATH=`pwd`/logpath;
mkdir -p $LOGPATH;
chmod g+rw $LOGPATH



countrySet="";
if [ "${COUNTRIES_ARG}" ]; then
    countrySet="${COUNTRIES_ARG}";
    echo "Using countrySet $countrySet";
else
   if [ ! "$fromM3" ]; then
      echo "Missing -countries option, exits.";
      exit 1;
   fi
fi




# Not checking countrySet, country gen or merge gen when running fromM3
if [ ! "${fromM3}" ]; then

#### Different COUNTRYLISTs ####################################
# Get the correct COUNTRYLIST from the -countries option
# Will also define the super overview list COO_LIST which lists the map 
# hierarchy, i.e. which overview maps belong to the super overview map
# Will also define the mapSetCount (for search route cache creation)
COUNTRYLIST="";
COO_LIST=""

# This is were to find the COO_LIST files
COO_PATH="${BASEGENFILESPATH}/mergeWorld/xml";
if [ ! -d $COO_PATH ]; then
   if [ ! ${generateCountries} ]; then
      echo "The COO_PATH directory does not exist - need to be created!"
      echo "COO_PATH: $COO_PATH";
      exit 1;
   fi
fi

# This country list: myCountries
# is used for a multi countries generation, or merge of special country set
# For multi countries generation: list the largest (=the ones which take 
# most time to generate) countries in the top of the list, in order to 
# optimize the distribution in the multi countries generation.
if [ ${countrySet} = "myCountries" ]; then
COO_LIST="${COO_PATH}/east_world_coo.xml"; # countries part of east
#COO_LIST="${COO_PATH}/west_world_coo.xml"; # countries part of west world
mapSetCount="0"; # default for east world
#mapSetCount="1"; # default for west world

COUNTRYLIST="sweden
             denmark"



elif [ ${countrySet} = "west_world" ]; then
COO_LIST="${COO_PATH}/west_world_coo.xml"; # west world
mapSetCount="1";
COUNTRYLIST="american_samoa
             anguilla
             antigua_and_barbuda
             argentina
             aruba
             bahamas
             barbados
             belize
             bermuda
             bolivia
             brazil
             british_virgin_islands
             canada
             cayman_islands
             chile
             colombia
             cook_islands
             costa_rica
             cuba
             dominica
             dominican_republic
             ecuador
             el_salvador
             falkland_islands
             french_guiana
             french_polynesia
             grenada
             guadeloupe
             guatemala
             guyana
             haiti
             honduras
             jamaica
             martinique
             mexico
             montserrat
             netherlands_antilles
             nicaragua
             niue
             panama
             paraguay
             peru
             pitcairn
             saint_kitts_and_nevis
             saint_lucia
             saint_pierre_and_miquelon
             saint_vincent_and_the_grenadines
             samoa
             suriname
             tokelau
             trinidad_and_tobago
             turks_and_caicos_islands
             united_states_minor_outlying_islands
             united_states_virgin_islands
             uruguay
             usa
             venezuela"


elif [ ${countrySet} = "east_world" ]; then
COO_LIST="${COO_PATH}/east_world_coo.xml";
mapSetCount="0";

COUNTRYLIST="afghanistan
             albania
             algeria
             andorra
             angola
             armenia
             australia
             austria
             azerbaijan
             bahrain
             bangladesh
             belarus
             belgium
             benin
             bhutan
             bosnia
             botswana
             brunei_darussalam
             bulgaria
             burkina_faso
             burundi
             cambodia
             cameroon
             cape_verde
             central_african_republic
             chad
             china
             comoros
             congo
             croatia
             cyprus
             czech_republic
             denmark
             djibouti
             dr_congo
             egypt
             equatorial_guinea
             eritrea
             estonia
             ethiopia
             faeroe_islands
             fiji
             finland
             france
             gabon
             gambia
             georgia_country
             germany
             ghana
             greece
             greenland
             guam
             guinea
             guinea_bissau
             hong_kong
             hungary
             iceland
             india
             indonesia
             iran
             iraq
             ireland
             israel
             italy
             ivory_coast
             japan
             jordan
             kazakhstan
             kenya
             kiribati
             kuwait
             kyrgyzstan
             laos
             latvia
             lebanon
             lesotho
             liberia
             libya
             liechtenstein
             lithuania
             luxembourg
             macao
             macedonia
             madagascar
             malawi
             malaysia
             maldives
             mali
             malta
             marshall_islands
             mauritania
             mauritius
             mayotte
             micronesia
             moldova
             monaco
             mongolia
             morocco
             mozambique
             myanmar
             namibia
             nauru
             nepal
             netherlands
             new_caledonia
             new_zealand
             niger
             nigeria
             northern_mariana_islands
             north_korea
             norway
             occupied_palestinian_territory
             oman
             pakistan
             palau
             papua_new_guinea
             philippines
             poland
             portugal
             qatar
             reunion
             romania
             russia
             rwanda
             saint_helena
             sao_tome_and_principe
             saudi_arabia
             senegal
             serbia_montenegro
             seychelles
             sierra_leone
             singapore
             slovakia
             slovenia
             solomon_islands
             somalia
             south_africa
             south_korea
             spain
             sri_lanka
             sudan
             svalbard_and_jan_mayen
             swaziland
             sweden
             switzerland
             syria
             taiwan
             tajikistan
             tanzania
             thailand
             timor_leste
             togo
             tonga
             tunisia
             turkey
             turkmenistan
             tuvalu
             uganda
             uk
             ukraine
             uae
             uzbekistan
             vanuatu
             vietnam
             wallis_and_futuna_islands
             western_sahara
             yemen
             zambia
             zimbabwe"

# The wayfinder world, listing all available countries
# Only change this list if changing the countries in Wayfinder world, e.g. 
# if one country is split up into new countries.
# No coo-file defined for this, only appropriate to use for multi 
# country generation (no merge)
elif [ ${countrySet} = "wf_world" ]; then
COO_LIST=""
COUNTRYLIST="afghanistan
             albania
             algeria
             american_samoa
             andorra
             angola
             anguilla
             antigua_and_barbuda
             argentina
             armenia
             aruba
             australia
             austria
             azerbaijan
             bahamas
             bahrain
             bangladesh
             barbados
             belarus
             belgium
             belize
             benin
             bermuda
             bhutan
             bolivia
             bosnia
             botswana
             brazil
             british_virgin_islands
             brunei_darussalam
             bulgaria
             burkina_faso
             burundi
             cambodia
             cameroon
             canada
             cape_verde
             cayman_islands
             central_african_republic
             chad
             chile
             china
             colombia
             comoros
             congo
             cook_islands
             costa_rica
             croatia
             cuba
             cyprus
             czech_republic
             denmark
             djibouti
             dominica
             dominican_republic
             dr_congo
             ecuador
             egypt
             el_salvador
             equatorial_guinea
             eritrea
             estonia
             ethiopia
             faeroe_islands
             falkland_islands
             fiji
             finland
             france
             french_guiana
             french_polynesia
             gabon
             gambia
             georgia_country
             germany
             ghana
             greece
             greenland
             grenada
             guadeloupe
             guam
             guatemala
             guinea
             guinea_bissau
             guyana
             haiti
             honduras
             hong_kong
             hungary
             iceland
             india
             indonesia
             iran
             iraq
             ireland
             israel
             italy
             ivory_coast
             jamaica
             japan
             jordan
             kazakhstan
             kenya
             kiribati
             kuwait
             kyrgyzstan
             laos
             latvia
             lebanon
             lesotho
             liberia
             libya
             liechtenstein
             lithuania
             luxembourg
             macao
             macedonia
             madagascar
             malawi
             malaysia
             maldives
             mali
             malta
             marshall_islands
             martinique
             mauritania
             mauritius
             mayotte
             mexico
             micronesia
             moldova
             monaco
             mongolia
             montserrat
             morocco
             mozambique
             myanmar
             namibia
             nauru
             nepal
             netherlands
             netherlands_antilles
             new_caledonia
             new_zealand
             nicaragua
             niger
             nigeria
             niue
             northern_mariana_islands
             north_korea
             norway
             occupied_palestinian_territory
             oman
             pakistan
             palau
             panama
             papua_new_guinea
             paraguay
             peru
             philippines
             pitcairn
             poland
             portugal
             qatar
             reunion
             romania
             russia
             rwanda
             saint_helena
             saint_kitts_and_nevis
             saint_lucia
             saint_pierre_and_miquelon
             saint_vincent_and_the_grenadines
             samoa
             sao_tome_and_principe
             saudi_arabia
             senegal
             serbia_montenegro
             seychelles
             sierra_leone
             singapore
             slovakia
             slovenia
             solomon_islands
             somalia
             south_africa
             south_korea
             spain
             sri_lanka
             sudan
             suriname
             svalbard_and_jan_mayen
             swaziland
             sweden
             switzerland
             syria
             taiwan
             tajikistan
             tanzania
             thailand
             timor_leste
             togo
             tokelau
             tonga
             trinidad_and_tobago
             tunisia
             turkey
             turkmenistan
             turks_and_caicos_islands
             tuvalu
             uae
             uganda
             uk
             ukraine
             united_states_minor_outlying_islands
             united_states_virgin_islands
             uruguay
             usa
             uzbekistan
             vanuatu
             venezuela
             vietnam
             wallis_and_futuna_islands
             western_sahara
             yemen
             zambia
             zimbabwe"
             #antarctica # not wanted in Wayfinder world

else
    echo "Invalid or missing country set. Check your -countries option , Exits."
    exit 1;
fi

if [ ! "$COUNTRYLIST" ]; then
    echo "Missing -countries option, exits.";
    exit 1;
fi




##################################################################
##################################################################
# Place where to generate misc setting files that can be pre-stored to 
# be used in the map generation

# Create the copyright box key txt file, listing map version (release)
# for each country in the specified $countrySet
# The map version is found in the country/before_merge/mapOrigin.txt file
# in each individual country map generation.
if [ "$createMapVerByCountryFile" ]; then
    # Only print map version by country file
    echo "Creating map versions by country files:"
    echo "${countrySet} from $COUNTRIESPATH";
    echo "Processing...";
    resultFile="`createMapVersionByCountryFile $COUNTRIESPATH $COUNTRYLIST`";
    echo "Map versions by countries result stored in: $resultFile";
    echo "$resultFile";
    exit
fi




# Reading and testing the extra data file.
# The extradata.sh is used for 
# - resolve border stitching 
# - applying special map correction records that cannot be stored 
#   in the WASP database
#
# If mc2 repo is given, the latest version of extradata.sh is checked out to
# this directory, else the version in the genfiles script-dir is used
echo ""
echo "Get the latest extradata.sh file from repository"
EXTRADATAFILE="${BASEGENFILESPATH}/script/extradata.sh"
if [ "${MC2REPO}" ]; then
   # get revision id of "tip"
   EDTIP=`ssh hg "cd ${MC2REPO};hg tip" | grep "^changeset" | cut -d":" -f2`;
   # get extradata.sh from hg
   `ssh hg "cd ${MC2REPO};hg cat -r ${EDTIP} Server/bin/Scripts/MapGen/extradata.sh" > "${RUNPATH}/extradata.sh"`;
   if ( [ -s "${RUNPATH}/extradata.sh" ] ) then
      EXTRADATAFILE="${RUNPATH}/extradata.sh"
      echo "using $EXTRADATAFILE from mc2 repository tip $EDTIP"
   fi
fi

if (! [ -s $EXTRADATAFILE ] ) then
   echo "No extradata.sh file - exits!";
   exit 1;
fi
echo "using $EXTRADATAFILE"

source ${EXTRADATAFILE}
echo "Testing extradata.sh here: ${EXTRADATAFILE}"
extradata sweden dummy_insert > /dev/null
chk_res

echo "";




#############################################################
# ===========================================================
# Generate single countries
# ===========================================================

if [ ${generateCountries} ]; then
   echo `date +"%Y%m%d %T"`" Generates single countries in:"
   echo "   $COUNTRIESPATH";
   echo "";
   # The path needs to be empty
   pushd $COUNTRIESPATH > /dev/null
   if [ `ls | grep -m 1 ".*"` ]; then
      echo " not empty. Exits";
      exit 1
   fi
   popd > /dev/null

   if [ ! "$COUNTRYGEN_COMPUTERS" ]; then
       echo "No country generation computers set, exits!";
       exit 1;
   fi

   # ==== Some checks that files are in place =========
   settingFilesOK="ok";
   for country in $COUNTRYLIST; do
      # This is where you find the country specific files
      GENFILESPATH="${BASEGENFILESPATH}/countries/$country";
      if [ ! -d "${GENFILESPATH}" ]; then
         echo "No countrydir for ${country}: ${GENFILESPATH}"
         settingFilesOK="";
      fi
      if [ ! -d "${GENFILESPATH}/script" ]; then
         echo "No dir: ${country}/script"
         settingFilesOK="";
      fi
      if [ ! -d "${GENFILESPATH}/${mapRelease}" ]; then
         echo "No dir: ${country}/${mapRelease}"
         settingFilesOK="";
      fi
      if [ ! -d "${GENFILESPATH}/${mapRelease}/xml" ]; then
         echo "No dir: ${country}/${mapRelease}/xml"
         settingFilesOK="";
      fi
      # BASEGENFILESPATH/countries/country
      # BASEGENFILESPATH/countries/country/script
      # BASEGENFILESPATH/countries/country/mapRelease
      # BASEGENFILESPATH/countries/country/mapRelease/xml
      # BASEGENFILESPATH/countries/country/mapRelease/xml/country_co.xml
      # BASEGENFILESPATH/countries/country/mapRelease/xml/country_ar.xml
      # BASEGENFILESPATH/countries/country/mapRelease/countrypol
      # BASEGENFILESPATH/countries/country/mapRelease/countrypol/*.mif
   done
   if [ ! "$settingFilesOK" ]; then
      echo "Missing setting files/dirs, exit"
      exit 1;
   fi

   
   # ==== Create input for multi country map generation =========
   for country in $COUNTRYLIST; do
       countryDir=${COUNTRIESPATH}/${country};

       # For multi second gen, define the after mapDataExtraction backup
       mdeBkp="";
       # Uncomment this if-statement and fill in the path to
       # the after_mapDataExtr backup dir
       # for each country you want to use a backup
#       if [ "${country}" = "sweden" ]; then
#          mdeBkp="$FULLPATH_TO_SWEDEN_FIRST_GEN/after_mapDataExtr"
#       else 
#          echo "no mdeBkp specified for country ${country}";
#          exit 1;
#       fi
       # check if dir exist, exit if not
       if [ "$mdeBkp" ]; then
          if [ ! -d "$mdeBkp" ]; then
             echo "incorrect mdeBkp specified for country ${country}: $mdeBkp";
             exit 1;
          fi
       fi
       
       extraOpt="-noFilt -noDist";
       if [ ${cntrFirstGen} ]; then
          extraOpt="-noExtFiltOrWASP -afterMapDataExtrBackup";
          if [ ${dist2} ]; then
             extraOpt="$extraOpt -dist2";
          fi
       else
          if [ ${dist2} ]; then
             extraOpt="-noFilt -dist2";
          fi
          if [ "$mdeBkp" ]; then
             extraOpt="$extraOpt -fromMapDataExtr -mdeBkpDir ${mdeBkp}";
          fi
       fi
       echo "mkdir ${countryDir};cd ${countryDir}; \
ln -s ${BINPATH}/* ${countryDir}; \
nice nice ./makemaps ${country} -mapRelease ${mapRelease} ${extraOpt} \
|& ${BASEGENFILESPATH}/script/mlog -noStdOut ${countryDir}/makemaps_${country};"

   done > to_be_distributed_countrygen

   # ==== Start the distributed individual country map generation =========
   cp ${BINPATH}/distribute .
   chk_res
   if [ ${no_dist} ]; then
       sh to_be_distributed_countrygen
   else
       if [ ${dummyrun} ]; then
           distFlag="-e"; #Makes distribute die on error.
       else
           distFlag="";
       fi
       ./distribute ${distFlag} $COUNTRYGEN_COMPUTERS < to_be_distributed_countrygen;
   fi

else
   # no generateCountries
   # if running noMapGen: skip info about where country map data will be fetched
   if [ ! $noMapGen ]; then
      echo "Not generating single countries. Fetching country map data from:"
      echo "   $COUNTRIESPATH";
      echo "";
   fi
fi # generateCountries

if [ "$noMerge" ]; then
   echo "";
   echo `date +"%Y%m%d %T"`" Not merging countries. Done!"
   exit;
fi






##################################################################
##################################################################
# Start collect misc setting files for the merge map generation

echo ""
echo `date +"%Y%m%d %T"`" Starts collecting misc settings for the merge generation";




if [ ! "$stitchMerge" ]; then
CRB_DIR="${COO_PATH}/crb";
if [ ! -d $CRB_DIR ]; then
   echo "The CRB_DIR directory does not exist - need to be created!"
   echo "CRB_DIR: $CRB_DIR";
   exit 1;
fi

# Find matching copyright box XML file for the specific countrySet
echo ""
echo `date +"%Y%m%d %T"`" Find copyright box XML file to use";
echo `date +"%Y%m%d %T"`" Validating ID files of ${CRB_DIR}";
validationError="`${BASEGENFILESPATH}/script/findCopyrightBoxFile.sh -validateIdFiles ${CRB_DIR} 2> /dev/null`";
if [ "$validationError" ]; then
    echo "Equal ID files found in ${CRB_DIR}";
    echo "$validationError";
    exit 1;
fi
echo `date +"%Y%m%d %T"`" Validating ID files OK";
# Find the file to use.
resultFile="`createMapVersionByCountryFile $COUNTRIESPATH $COUNTRYLIST`";
chk_res;
fileToUse="`${BASEGENFILESPATH}/script/findCopyrightBoxFile.sh ${CRB_DIR} $resultFile 2> /dev/null`";
chk_res;
CRB_FILE=""; # The copyright box XML file.
if [ ! "$fileToUse" ]; then
    echo "Could not find copyright box XML file to use. Trying option -crbFile.";
    if [ "$CRBFILE_ARG" ]; then
       echo "Copyright box XML file to use from option $CRBFILE_ARG"
       CRB_FILE="$CRBFILE_ARG";
    else
       echo "Could not find any copyright box XML file to use. Exits!";
       echo "Looked in ${CRB_DIR}";
       exit 1;
    fi
else
    CRB_FILE="`echo $fileToUse | sed -e 's/\.txt/.xml/'`"
    chk_res;
    echo "Copyright box ID file: $fileToUse";
    # Check that findCopyrightBoxFile.sh did its job.
    cmpResult="`compareMapVersioByCountrySuppliers $resultFile $fileToUse`";
    chk_res;
    if [ "$cmpResult" ]; then
       echo "Diff:"
       echo "$cmpResult";
       echo ""
       echo "Something wrong with copyright box file"
       echo "Error in $findCopyrightBoxFile.sh";
       exit 1;
    fi
fi
echo "Copyright box XML file:    $CRB_FILE";
if [ ! -e "$CRB_FILE" ]; then
    echo "Choosen copyright box file missing, exits!";
    exit 1;
fi
# Clean up
mv mapVerByCountry1_* $LOGPATH;

else
   echo "Skip find matching copyright box XML file for stitchMerge"
fi # stitchMerge






# Param files for 
# X: generate country overview maps
GMS_X_PARAMS_FILE=gms_X_Params.txt;
# OVR: generate overview level 1 maps
GMS_OVR_PARAMS_FILE=gms_ovr_Params.txt;

echo ""
echo "Creates CO_LIST, AR_LIST, MCM_LIST etc"
MCM_LIST="";
CO_LIST=""
AR_LIST=""
OLDCOM_LIST="" # Not really used anymore, only used for checking.
GMS_X_LIST="";
GMS_OVR_LIST="";
for country in $COUNTRYLIST; do

    MCM_LIST="${MCM_LIST} ${COUNTRIESPATH}/${country}/before_merge";

    XMLSUBDIR="`cat ${COUNTRIESPATH}/${country}/before_merge/mapOrigin.txt`"
    chk_res;
    XMLPATH="${BASEGENFILESPATH}/countries/${country}/${XMLSUBDIR}/xml"

   #Collect paths to country_co.xml files.
   CO_LIST="${CO_LIST} ${XMLPATH}/${country}_co.xml";

   #Collect paths to country_ar.xml files.
   AR_LIST="${AR_LIST} ${XMLPATH}/${country}_ar.xml";

   #Collect parameters to GMS -X
   GMS_X_LIST="${GMS_X_LIST}
${XMLPATH}/${country}_co.xml"

   #Collect parameters to GMS --createOverview *co.xml
   GMS_OVR_LIST="${GMS_OVR_LIST}
${XMLPATH}/${country}_co.xml"

   
   #Collect old country map files paths. 
   #(from which to copy country polygon filtering)
   oldCoMapPath="${BASEGENFILESPATH}/countries/${country}/countrypol"
   oldCoMaps=`ls ${oldCoMapPath}/08*.mcm`
   for map in ${oldCoMaps}; do
       OLDCOM_LIST="${OLDCOM_LIST} ${map}";
       GMS_X_LIST="${GMS_X_LIST} ${map}";
   done

done
echo "${GMS_X_LIST}" > ${GMS_X_PARAMS_FILE};
echo "${GMS_OVR_LIST}" > ${GMS_OVR_PARAMS_FILE};


#Print input to map merging  =============================================

echo ""
echo ""
echo "MCM_LIST"
echo "${MCM_LIST}" | tr " " "\n" | sed -e 's/^/\ \ \ /'
echo ""
echo ""
echo "OLDCOM_LIST"
echo "${OLDCOM_LIST}" | tr " " "\n" | sed -e 's/^/\ \ \ /'
echo ""
echo ""
echo "AR_LIST"
echo "${AR_LIST}" | tr " " "\n" | sed -e 's/^/\ \ \ /'
echo ""
echo ""
echo "CO_LIST"
echo "${CO_LIST}" | tr " " "\n" | sed -e 's/^/\ \ \ /'
echo ""



# Test input files to map merging==========================================
# Check all countries are defined in the extradata function of extradata.sh
echo "Testing extradata.sh"
for country in $COUNTRYLIST; do
   extradata $country dummy_insert > /dev/null
   chk_res
done
echo "Done";



echo "Checking mcm list...";
for dir in $MCM_LIST; do
   baseDir=`echo $dir | sed -e 's/\(^.*\)before_merge/\1/'`

   # Check that the mcm-list dirs are present when doing merge map generation

   if [ -d $dir ]; then
      ok="ok";
   else
      echo "Dir in mcm list: ${dir}"
      echo "does not exist."
      if [ "${dummyrun}" -o "${onlySuper}" ]; then
         ok="ok";
      else
         echo "Exits!"
         exit 1
      fi
   fi
done
echo "Done checking mcm list";


for file in $OLDCOM_LIST; do
   if [ -e $file ]; then
      ok="ok";
   else
      echo "File: ${file} do not exist!"
      exit 1
   fi
done

for file in $AR_LIST; do
   if [ -e $file ]; then
      ok="ok"
   else
      echo "File: ${file} do not exist!"
      exit 1
   fi
done


for file in $CO_LIST; do
   if [ -e $file ]; then
       ok="ok"
   else
      echo "File: ${file} do not exist!"
   fi
done

for file in $COO_LIST; do
   if [ -e $file ]; then
       ok="ok"
   else
      echo "File: ${file} do not exist!"
   fi
done

echo ""
echo "===================================================="
echo "Merge directory:  $MERGEPATH"
echo ""

# Safe way to logon to the merge computer
SSHOPT="-o StrictHostKeyChecking=no -o NoHostAuthenticationForLocalhost=yes localhost.itinerary.com"

# Merge path
if [ ! "${noMerge}" ]; then
    echo "Checking merge path from merge computer."
    if [ "`ssh -n ${SSHOPT} ls -d ${MERGEPATH}`" ]; then
        echo "Merge path reachable from merge computer.";
    else
        echo "Merge path not reachable from merge computer. Exits!";
        exit 1;
    fi
fi










#############################################################
# ===========================================================
# Merge map generation
# ===========================================================

echo "===================================================="
echo ""
echo `date +"%Y%m%d %T"`" Merge map generation starts."
echo "   countries from $COUNTRIESPATH";
echo "   merge in       $MERGEPATH";
echo "";

# Try to always call chk_res after a SSHCMD call. Otherwise the script
# wont exit on Ctlr-C.
SSHCMD="ssh -t ${SSHOPT} ulimit -Sc 6144000 && cd $MERGEPATH &&";
SSHCPCMD="${SSHCMD}";


# Determine order of mcm underview maps for the merge
ORDERED_MCMLIST=`countryOrder $MCM_LIST`
chk_res


#############################################################
# Define some stuff used in merge, check that everything is in place

BREAKPOINTSFILE="${BASEGENFILESPATH}/countrypol/countryBorderBreakPoints.txt";
if [ ! -e "${BREAKPOINTSFILE}" ]; then
   echo "The country polygon break points file missing, exits";
   echo "BREAKPOINTSFILE: ${BREAKPOINTSFILE}"
   exit 1;
fi



#############################################################
# Merge starts

   #Copy binaries.
echo ""
echo `date +"%Y%m%d %T"`" Copies binaries to merge directory from: ${BINPATH}"
${SSHCMD} cp ${BINPATH}/*  ${MERGEPATH};
chk_res

   # Check the mc2 server map preparations binaries exists.
echo ""
echo "Checking mc2 bins";
if [ ! -e "${BINPATH}/MapHttpServer" ]; then
  echo "MapHttpServer missing in bin dir, exits";
  exit 1;
fi

if [ $mapSetCount ]; then
   if [ ! -e "${BINPATH}/MapModule" ]; then
      echo "MapModule missing in bin dir, exits";
      exit 1;
   fi
fi
echo "OK!";





if [ $noMapGen ]; then
   echo ""
   echo `date +"%Y%m%d %T"`" running noMapGen"
else
   # The code below is not executed if we don't want any maps to be 
   # generated, e.g. starting with dynamic ed

if [ $onlySuper ]; then
   echo ""
   echo `date +"%Y%m%d %T"`" running onlySuper"
else
   # Then code below is not executed if we only want to build the super 
   # overview.



   # Copy the original maps for countries/before_merge dirs and 
   # change their map ids so they are consequtive
   # Make sure that the merge directory is empty from maps before starting.
echo ""
echo `date +"%Y%m%d %T"`" Copies maps and changes their map IDs.";
if [ "`ssh -n ${SSHOPT} ls ${MERGEPATH}/*.mcm* ${MERGEPATH}/index.db | grep -m 1 \".*\"`" ]; then
    echo "   Merge directory not empty. Exits";
    exit 1;
fi
echo "   OK! Merge path empty."
if [ -z $dummyrun ]; then
    chMapIdScript="${BASEGENFILESPATH}/script/changemapids"
    echo "   Using script ${chMapIdScript}";

    ${SSHCPCMD} ${chMapIdScript} ${ORDERED_MCMLIST}
    chk_res
    echo ""
    echo `date +"%Y%m%d %T"`" Unzipps *.mcm.bz2 files.";
    ${SSHCMD} 'bunzip2 *.mcm.bz2'
    chk_res
else
    echo "Skips changemapids in dummyrun.";
fi

if [ "$dummyrun" ]; then
    ${SSHCMD} touch 000000000.mcm;
fi

echo ""
echo `date +"%Y%m%d %T"`" Adds read+write permitts for group on 00-maps.";
${SSHCMD} chmod g+rw 00*.mcm





   # Resolve border stitching

if [ "$stitchMerge" ]; then
    echo `date +"%Y%m%d %T"`" Exit before Resolving border stitching"
    exit 0;
fi

echo ""
echo `date +"%Y%m%d %T"`" Resolving border stitching";
ROWSEPCOUNTRYDIRS=`echo "${MCM_LIST}" | tr " " "\n"`
function getMapOrig {
    theCountry=$1;

    countryDir=`echo "${ROWSEPCOUNTRYDIRS}" | grep "/$theCountry/"`
    if [ ! "${countryDir}" ]; then
        # Not returning anything, not generating this country.
        ok=${ok}
    else

        mapOrigFile="${countryDir}/mapOrigin.txt"
        if [ ! -e ${mapOrigFile} ];then
            echo "FAILED";
        else
            # Return value
            cat $mapOrigFile
        fi
    fi
}

TMPFILE1=`mktemp getNeighboursXXXXXXXXX`;
for borderCountry in ${COUNTRYLIST} ; do
    mapOrig1=`getMapOrig $borderCountry`
    if [ "${mapOrig1}" = "FAILED" ];then
        echo "Missing mapOrigin.txt for $borderCountry"
        exit 1;
    elif [ ! "${mapOrig1}" ]; then
        # We are not generating this country
        ok=${ok}
    else
        coCode1=`countryToISO3166Code $borderCountry`
        
        neighbours="`getNeighbours $borderCountry`";
        for ngbr in $neighbours; do
            if [ "$ngbr" ]; then
                mapOrig2=`getMapOrig $ngbr`;
                if [ "${mapOrig2}" = "FAILED" ];then
                    echo "Missing mapOrigin.txt for $ngbr"
                    exit 1;
                elif [ ! "${mapOrig2}" ]; then
                    # We are not generating this country
                    ok=${ok}
                else
                    
                    coCode2=`countryToISO3166Code $ngbr`
                    
                    fileNameBase="";
                    for pairHalf in `echo "${coCode1}_${mapOrig1}
${coCode2}_${mapOrig2}" | sort`; do
                        fileNameBase="${fileNameBase}${pairHalf}-";
                    done
                    fileNameBase=`echo "${fileNameBase}" | sed -e 's/-$//'`;
                    echo " $fileNameBase";
                fi
            fi
        done
    fi
done | sort -u > ${TMPFILE1}

stitch "`cat ${TMPFILE1}`" "${SSHCMD}"



   # Copy mif files (links them not to take much disc space)
for country in $COUNTRYLIST; do
echo `date +"%Y%m%d %T"`" Copies mif files for $country.";
   ${SSHCMD} ln -s ${BASEGENFILESPATH}/countries/${country}/countrypol/*.mif  ${MERGEPATH};
done




   ################################################
   # Create external connections between the underview maps
echo ""
echo `date +"%Y%m%d %T"`" GMS: external connections after change map IDs.";
preploclog $LOGPATH/gs_e.log
${SSHCMD} nice time ./GenerateMapServer -e >& $loclog
chk_log




   ################################################
   # Create the country overview maps
echo ""
echo `date +"%Y%m%d %T"`" GMS: country overview maps";
# Check the GMS_X_PARAMS_FILE
if [ ! -e ${GMS_X_PARAMS_FILE} ]; then
    echo "Param file for GMS -X: ${GMS_X_PARAMS_FILE} does not exits."
    echo "Exits!"
    exit 1;
fi
# Remove any handed file.
HDLUNDFILE="undName2MapID.txt";
if [ -e ${MERGEPATH}/${HDLUNDFILE} ]; then
    timeStamp=`date +"%Y%m%d_%T"`
    mv ${MERGEPATH}/${HDLUNDFILE} ${MERGEPATH}/${HDLUNDFILE}.$timeStamp
    echo "Moved ${MERGEPATH}/${HDLUNDFILE} to ${MERGEPATH}/${HDLUNDFILE}.$timeStamp";
fi

ovrCount=0;
breakPointsOpt="--coPolBreakPoints=${BREAKPOINTSFILE}";
for line in ${ORDERED_MCMLIST}; do
    country=`echo "${line}" | sed -e 's/\/before_merge.*$//' | sed -e 's/.*\///'`
    params="`grep \"/${country}/\" ${GMS_X_PARAMS_FILE}`";
    if [ ! "${params}" ]; then
        # Must have paramters for all countries.
        echo "Params for GMS -X country:${country} is empty. Exits!";
        exit 1;
    fi

    echo `date +"%Y%m%d %T"`" GMS: country overview map for ${country}";

    # Generate country overview maps one at a time.
    continue="TRUE";
    while [ "$continue" ]; do
       preploclog $LOGPATH/gs_X_${ovrCount}_${country}.log
       ${SSHCMD} nice time ./GenerateMapServer ${breakPointsOpt} -X ${params} >& $loclog;
       exitCode=$?;
       mv $loclog $kasdole_realLogFileName; #Connected to preloclog.
       #echo "Exit code: $exitCode"; # Remove this print later
       if [ ${exitCode} -eq 77 ]; then
           continue="";
       elif [ ${exitCode} -ne 0 ]; then
           echo "Country overview creation returned error, extis!"
           exit 1;
       fi
       ovrCount=$[ovrCount+1];
    done
done
echo ""
echo `date +"%Y%m%d %T"`" Adds read+write permitts for group on 08-maps.";
${SSHCMD} chmod g+rw 08*.mcm


   # Check the result from country overview creation.
nbrHandled=`${SSHCMD} grep "TRUE" ${HDLUNDFILE} | wc -l`
nbrUnderviews=`${SSHCMD} ls -1 00*.mcm | wc -l`
echo "Added " ${nbrHandled} " underview maps of " ${nbrUnderviews}
echo "to country maps.";
if [ ${nbrUnderviews} -ne ${nbrHandled} ]; then
    echo "Not all underview maps have been added to the country"
    echo "overviewmaps. Check your *co.xml file. Exits! "
    exit 1;
fi
mv ${GMS_X_PARAMS_FILE} ${LOGPATH}
if [ "$dummyrun" ]; then
    ${SSHCMD} touch 080000001.mcm;
fi
   # Done adding country overview maps.


   # Now we can create border items.
   # Uses the borderItems.txt and countryBorders.txt files
echo ""
echo `date +"%Y%m%d %T"`" GMS: create border items";
    preploclog $LOGPATH/gs_borderItems.log
    ${SSHCMD} nice time ./GenerateMapServer ${breakPointsOpt} --createBorderItems >& $loclog
    chk_log



   ################################################
   # Create the overview maps.
echo ""
echo `date +"%Y%m%d %T"`" GMS: overview maps";
if [ ! -e ${GMS_OVR_PARAMS_FILE} ]; then
    echo "Param file for GMS --createOverview *co.xml: ${GMS_OVR_PARAMS_FILE} "
    echo "does not exits. Exits!"
    exit 1;
fi
# Remove any handled file
HDLUNDFILE="mapName2MapID.txt";
if [ -e ${MERGEPATH}/${HDLUNDFILE} ]; then
    timeStamp=`date +"%Y%m%d_%T"`
    mv ${MERGEPATH}/${HDLUNDFILE} ${MERGEPATH}/${HDLUNDFILE}.$timeStamp
    echo "Moved ${MERGEPATH}/${HDLUNDFILE} to ${MERGEPATH}/${HDLUNDFILE}.$timeStamp";
fi
#

ovrCount=0;
for line in ${ORDERED_MCMLIST}; do
    country=`echo "${line}" | sed -e 's/\/before_merge.*$//' | sed -e 's/.*\///'`
    params="`grep \"/${country}/\" ${GMS_OVR_PARAMS_FILE}`";
    if [ ! "${params}" ]; then
        # Must have paramters for all countries.
        echo "GMS --createOverview *co.xml country:${country} params are empty. Exits!";
        exit 1;
    fi
    echo `date +"%Y%m%d %T"`" GMS: overview map for ${country}";

    # Generate overview maps one at a time.
    continue="TRUE";

    while [ "$continue" ]; do
        preploclog $LOGPATH/gs_ovr_${ovrCount}_${country}.log
        ${SSHCMD} nice time ./GenerateMapServer  --createOverview --coXML="${params}" >& $loclog
        exitCode=$?;
        mv $loclog $kasdole_realLogFileName; #Connected to preloclog.
        if [ ${exitCode} -eq 77 ]; then
           continue="";
        elif [ ${exitCode} -ne 0 ]; then
           echo "Overview creation returned error, extis!"
           exit 1;
        fi
        ovrCount=$[ovrCount+1];
    done
done
echo ""
echo `date +"%Y%m%d %T"`" Adds read+write permitts for group on 08-maps.";
${SSHCMD} chmod g+rw 08*.mcm

   # Check the result from overview creation.
HDLUNDFILE="mapName2MapID.txt";
nbrHandled=`${SSHCMD} grep "' [0-9]\{1,3\} TRUE'" ${HDLUNDFILE} | wc -l`
nbrUnderviews=`${SSHCMD} ls -1 00*.mcm | wc -l`
echo "Added " ${nbrHandled} "underview maps of" ${nbrUnderviews}
echo "to overview maps.";
if [ ${nbrUnderviews} -ne ${nbrHandled} ]; then
    echo "Not all underview maps have been added to the "
    echo "overviewmaps. Check your *co.xml file. Exits! "
    exit 1;
fi



mv ${GMS_OVR_PARAMS_FILE} ${LOGPATH}
if [ "$dummyrun" ]; then
    ${SSHCMD} touch 080000000.mcm;
fi
   # Done creating overview maps.



   ################################################
   # Add zip codes from overview maps to country overview maps.
echo ""
echo `date +"%Y%m%d %T"`" GSM: adds zipcodes from overview maps to";
echo "country overview maps.";
for coOverview in `${SSHCMD} find -maxdepth 1 -name "08\*\[13579dbf\].mcm"`; do
   fileName=`basename $coOverview`
   coId=`echo $fileName | sed -e 's/\(^.*\)\.mcm.*$/\1/'`;
   decOvrId=$[0x$coId-1];
   ovrId=`printf "%x" $decOvrId`
   preploclog $LOGPATH/addZipTo${coId}.log
   ${SSHCMD} nice time ./GenerateMapServer --addziptocountrymaps=${coId}.mcm 0${ovrId}.mcm >& $loclog
   chk_log
done



   ################################################
   # Create external connection between the overview (level 1) maps.
echo ""
echo `date +"%Y%m%d %T"`" GMS: external connections after overview maps.";
preploclog $LOGPATH/gs_e_E08.log
${SSHCMD} nice time ./GenerateMapServer -e -E 2147483648 >& $loclog
chk_log




fi # onlySuper - only super overview.
   # The code above is not executed if onlySuper is given.


if [ ! "${rebuildIdx}" ]; then


   ################################################
   # Create the super overview map (overview level 2)
if [ "${COO_LIST}" ]; then 
    ovrCount=0;
    continue="true";

    while [ "$continue" ]; do

        echo ""
        echo `date +"%Y%m%d %T"`" GMS: super overview map ${ovrCount}.";
        # 
        # To reset super overview creation in mapName2MapID.txt:
        # sed -e 's/\([0-9]\{10\}\) TRUE/\1 FALSE/'
        #
        preploclog $LOGPATH/gs_supovr_${ovrCount}.log
        ${SSHCMD} nice time ./GenerateMapServer --createOverview --coXML=\"${COO_LIST}\" >& $loclog
        exitCode=$?;
        mv $loclog $kasdole_realLogFileName; #Connected to preloclog.
        if [ ${exitCode} -eq 77 ]; then
            continue="";
        elif [ ${exitCode} -ne 0 ]; then
            echo "Super overview creation returned error, extis!"
            exit 1;
        fi
        ovrCount=$[ovrCount+1];
    done



   echo ""
   echo `date +"%Y%m%d %T"`" Adds read+write permitts for group on 09-maps.";
   ${SSHCMD} chmod g+rw 09*.mcm


   # Check the result from super overview creation.
   HDLUNDFILE="mapName2MapID.txt";
   nbrHandled=`${SSHCMD} grep "' [0-9]\{9\}[02468] TRUE'" ${HDLUNDFILE} | wc -l`
   nbrUnderviews=`${SSHCMD} ls -1 08*[02468ace].mcm | wc -l`
   echo "Added" ${nbrHandled} "underview maps of" ${nbrUnderviews}
   echo "to overview maps.";
   if [ ${nbrUnderviews} -ne ${nbrHandled} ]; then
       echo "Not all overview maps have been added to the super"
       echo "overviewmaps. Check your *coo.xml file. Exits! "
       exit 1;
   fi


      # External connections between super overview maps.
   echo ""
   echo `date +"%Y%m%d %T"`" GMS: external connection between super overview maps."
   preploclog $LOGPATH/gs_e_E09.log
   ${SSHCMD} nice time ./GenerateMapServer -e -E 2415919104 >& $loclog
   chk_log

fi

fi # end ! rebuildIdx




   ################################################
   ### Create index.db
   #
   #   Now all overview maps have been created (both level 1 and level 2),
   #   time to create the index and add the regions.
   #
   ###

echo ""
echo `date +"%Y%m%d %T"`" GMS: create index.";
preploclog $LOGPATH/gs_createIndex.log
${SSHCMD} nice ./GenerateMapServer --createNewIndex --coXML=\"${CO_LIST}\" --cooXML=\"${COO_LIST}\" >& $loclog
chk_log
echo `date +"%Y%m%d %T"`" Adds read+write permitts for group on index.db.";
${SSHCMD} chmod g+rw index.db

   # Add regions
echo ""
echo `date +"%Y%m%d %T"`" GMS: add regions to index.";
REGIONFILE=$REGIONSPATH/region_ids.xml
MAPSUPNAMESFILE=$MAPSUPNAMESPATH/map_supplier_names.xml
# The old command without copright strings from copyright box files
#${SSHCMD} nice time ./GenerateMapServer --addRegionsToIndex --arXML=\"${AR_LIST} ${REGIONFILE}\" >& $LOGPATH/gs_ar.log
preploclog $LOGPATH/gs_ar.log
${SSHCMD} nice time ./GenerateMapServer --addMapSupCoverage --mapSupNamesXML=${MAPSUPNAMESFILE} --crbXML=$CRB_FILE   --addRegionsToIndex --arXML=\"${AR_LIST} ${REGIONFILE}\" >& $loclog
chk_log

if [ "$dummyrun" ]; then 
    ${SSHCMD} touch index.db;
fi

fi #end of noMapGen



   ################################################
   # Run dynamic extra data on the merged maps.
if [ "${dynamicED}" ]; then
echo ""
echo `date +"%Y%m%d %T"`" Adding dynamic extra data to the merged maps.";
echo ""
echo "==================================================================="
echo "makemaps.dynamic"
echo ""
${SSHCMD} nice time ./makemaps.dynamic -noFilt
chk_res
echo "==================================================================="
echo ""
echo ""
fi

   # Filter maps (log prints in FILTERSCRIPT)
if [ "${filterMaps}" ]; then
   if [ ! "${FILT_COMPUTERS}" ]; then
      echo "No computers for filtering given, exit"
      exit 1;
   fi
    ${SSHCMD} "$FILTERSCRIPT ${MERGEPATH} ${MERGEPATH} \"${FILT_COMPUTERS}\""
    chk_res
fi


if [ ! "${rebuildIdx}" ]; then
   # Update creation times (after any dynamic changes and filtering)
echo ""
echo `date +"%Y%m%d %T"`" GMS: update creation times.";
preploclog $LOGPATH/gs_U.log
${SSHCMD} nice time ./GenerateMapServer --updateCreationTimes >& $loclog
chk_log

fi # end ! rebuildIdx 2


   ################################################
   # Run verify
echo ""
echo `date +"%Y%m%d %T"`" Verify: checking validity of all maps."
rm -rf qualityreport
mkdir qualityreport
${SSHCMD} ./verify . 2>&1| tee -a qualityreport/qualityreport.log
chk_res

   # Adds reading permissions to maps and other stuff in the directory
${SSHCMD} chmod g+rw . -R >& /dev/null


else

  # Special checks for fromM3.
  # Need to define the SSHCMD!
  SSHCMD="ssh -t `hostname`  ulimit -Sc 6144000 && cd `pwd` &&";
fi # ! fromM3






   ##########################################################
   # Create the server maps: m3 maps, search and route chaches   
if [ ! "${noM3}" ]; then

echo `date +"%Y%m%d %T"`" Creating m3-maps";
echo `date +"%Y%m%d %T"`"    Puts mc2.prop together";
${SSHCMD} "mv mc2.prop mc2.prop.orig"; # saves the original mc2.prop
chk_res
# Put the mc2.prop file together for m3.
${SSHCMD} "echo \"
MAP_SERV_DEST_PATH=./${MC2DIR}
MAP_SERV_SOURCE_PATH=./
\" > mc2.prop"
${SSHCMD} "cat mc2.prop.end >> mc2.prop"
${SSHCMD} mkdir -p ${MC2DIR};
chk_res
# Create the maps.
echo `date +"%Y%m%d %T"`"    Calling MapHttpServer";
preploclog $LOGPATH/mhs_a.log
${SSHCMD} nice ./MapHttpServer -a >& $loclog
chk_log
${SSHCMD} chmod g+rw mc2.prop >& /dev/null
${SSHCMD} mv mc2.prop mc2.prop.m3
${SSHCMD} chmod g+rw ${MC2DIR} -R >& /dev/null

# Create the version file.
if [ ${MERGEPATH} ]; then
    VER_FILE=${MERGEPATH}/${MC2DIR}/mapversion.txt
    echo `date +"%Y%m%d %T"`" Creates the version file:   ${VER_FILE}";
    ${SSHCMD} echo "Permanent storage: \`pwd\`" > ${VER_FILE};
    ${SSHCMD} echo "M3 created: `date +\"%Y%m%d %T\"`" >> ${VER_FILE};
    ${SSHCMD} echo "Overview maps: " >> ${VER_FILE};
    ${SSHCMD} ./whichmaps 08*[02468ace].mcm >> ${VER_FILE};
fi
fi # noM3

if [ ! "${noCache}" ]; then
    if [ "$mapSetCountArg" ]; then
        mapSetCount="$mapSetCountArg";
        echo "Using map set count from -mapSet parameter:$mapSetCount";
    fi
if [ "$mapSetCount" ]; then
echo `date +"%Y%m%d %T"`" Search and route map cache";
${SSHCMD} "echo \"
MODULE_CACHE_PATH_0=${MC2DIR}/cache0
MODULE_CACHE_PATH_1=${MC2DIR}/cache1
MAP_SET_COUNT=2
MAP_PATH_0=${MC2DIR}
MAP_PATH_1=${MC2DIR}
\" > mc2.prop"
${SSHCMD} "cat mc2.prop.end >> mc2.prop"
# Create the directory and set argument.
if [ $mapSetCount = "0" ]; then
    mapSetArg="--mapSet=0"
    ${SSHCMD} mkdir -p ${MC2DIR}/cache0;
    ${SSHCMD} chmod g+rw ${MC2DIR}/cache0;
elif [ $mapSetCount = "1" ]; then
    mapSetArg="--mapSet=1"
    ${SSHCMD} mkdir -p ${MC2DIR}/cache1;
    ${SSHCMD} chmod g+rw ${MC2DIR}/cache1;
else
    echo "Invalid map set count, exits";
    exit 1;
fi
preploclog $LOGPATH/mm_saveSR.log
${SSHCMD} "nice ./MapModule --saveMaps=\"0,1;..\"" $mapSetArg >& $loclog
chk_log noExit # chk_log is needed in order to move the log file, but we
# don't want it to exit here because MapModule always returns a non-zero
# exit code.

# Check cache result
CACHEDIR=${MC2DIR}/cache${mapSetCount};
if [ ${MERGEPATH} ]; then
   CACHEDIR=${MERGEPATH}/${MC2DIR}/cache${mapSetCount};
fi
if [ "`find ${CACHEDIR} -size 0`" ]; then
    echo "ERROR: Empty search or route cache files have been generated.";
    find ${CACHEDIR} -size 0;
fi


${SSHCMD} chmod g+rw mc2.prop >& /dev/null
${SSHCMD} mv mc2.prop mc2.prop.sr
${SSHCMD} chmod g+rw ${MC2DIR}/cache0 -R >& /dev/null
${SSHCMD} chmod g+rw ${MC2DIR}/cache1 -R >& /dev/null

else
    echo "No mapSetCount, exits";
    exit 1;
fi # mapSetCount
fi # noCache

# move back the original mc2.prop
${SSHCMD} "mv mc2.prop.orig mc2.prop"




echo ""
echo `date +"%Y%m%d %T"`" Done!";

