#!/bin/sh -x
# Script to parse misc midmif data to Wayfinder midmif
#


# BASEGENFILESPATH 
# genfiles is the base directory where all setting files for map generation
# is stored
# Update it to point to the full path of where you create the BASEGENFILESPATH
#BASEGENFILESPATH="fullpath/genfiles";
#BASEGENFILESPATH="."

#Set the BASEGENFILESPATH assuming this script is located in genfiles/script
BASEGENFILESPATH=`echo $(dirname $(readlink -f ${BASH_SOURCE[0]})) | sed -e "s/\/script$//"`


source ${BASEGENFILESPATH}/script/mfunctions.sh

STEPS="rundos2unix
       correctPlineMultiple
       mergeParkFiles
       parseItems
       parsePOIs";

startStep="";
stopStep="";
stepsDone=0;

supplier="";
coordSysString="";

#scriptDir="`pwd`";
scriptDir=$(dirname $(readlink -f ${BASH_SOURCE[0]}))



# Print the commandline to the log.
commandLine="$0";
for i; do
    commandLine="${commandLine} $i";
done
echo "Command line: ${commandLine}";
echo `date +"%Y%m%d %T"`" Start"
echo ""


# Read input arguments.
argNbr=0;      # Index of non-flagged parameter.
pos=1;         # Corresponds to index of positional parameter.
flaggedArg=""; #false
for i; do
   case $i in
      -h) echo "Usage:"
          echo " midmif_autoParseToWF [OPTIONS]"
          echo ""
          echo "Preparations before running the steps in this script:"
          echo " 1. clean up name of supplier midmif item directories and files,"
          echo "    e.g. replace space with underscore"
          echo " 2. create the parse variable file, store on genfiles, e.g."
          echo "    countries/denmark/script/parseMidMif_OSM_201005.sh"
          echo ""
          echo "Options:"
          echo "-mapRelease"
          echo "      The map release, e.g. OSM_201005"
          echo "-start"
          echo "      The start step, 1-5. Run one step at a time."
          echo "-stop"
          echo "      The stop step, 1-5. Run one step at a time."
          echo "-parseVarFile"
          echo "      The file with variables for parsing the "
          echo "      supplier style midmif data to Wayfinder midmif"
          echo "      e.g. denmark/script/parseMidMif_OSM_201005.sh"
          echo "-coordSys"
          echo "      The coord sys in the mif files, example wgs84_latlon_deg"
          echo "      See GMSGfxData::readMifHeader for possible "
          echo "      coord sys strings"
          echo ""
          echo ""
          exit;;
      -start) eval START_ARG=$\{`echo $[pos+1]`\};
            flaggedArg="true";;
      -stop) eval STOP_ARG=$\{`echo $[pos+1]`\};
            flaggedArg="true";;
      -coordSys) eval COORDSYS_ARG=$\{`echo $[pos+1]`\};
            flaggedArg="true";;
      -mapRelease) eval MAP_RELEASE_ARG=$\{`echo $[pos+1]`\};
            flaggedArg="true";;
      -parseVarFile) eval PARSEVARFILE_ARG=$\{`echo $[pos+1]`\};
            flaggedArg="true";;
      -*) echo "Invalid option $i"; exit;;
      *) if [ ${flaggedArg} ]; then
           flaggedArg=""; #false
         else
            eval arg${argNbr}="$i";
            argNbr=$[argNbr+1]
         fi;;
   esac
   pos=$[pos+1];
done




######################################################
# Parse and check the script options
#

# If the individual supplier parse script need to have language
# sent to it, define the language here. Use the 3-letter abbreviation
# that is defined in Wayfinder midmif specification
lang="";
mapRelease="";
if [ "$MAP_RELEASE_ARG" ]; then
   
   # TA MN shape
   if [ "$MAP_RELEASE_ARG" = "TA_2010_06" ]; then
      mapRelease=$MAP_RELEASE_ARG;
      supplier="TeleAtlasMNshp";
      
   # Open Street Map
   elif [ "$MAP_RELEASE_ARG" = "OSM_201005" ]; then
      mapRelease=$MAP_RELEASE_ARG;
      supplier="OSM";
   
   else
       echo "Invalid map release $MAP_RELEASE_ARG. Exits!"
       exit 33
   fi
else
   echo "No map release given - exit"
   exit 33
fi

PARSEVARFILE="";
if [ "$PARSEVARFILE_ARG" ]; then
   PARSEVARFILE="$PARSEVARFILE_ARG";
else
   echo "No parse variable file given - exit"
   exit 33
fi
source ${PARSEVARFILE}

if [ "$START_ARG" ]; then
   startStep=$START_ARG;
else
   echo "No start step given - exit"
   exit 1;
fi
if [ "$STOP_ARG" ]; then
   stopStep=$STOP_ARG;
else
   echo "No stop step given - exit"
   exit 1;
fi

if [ "$COORDSYS_ARG" ]; then
   coordSysString=$COORDSYS_ARG;
else
   echo "No coordSys provided - exit"
   exit 1;
fi


# Decide the wf_midmif directory name. It is created in the map data
# RELEASEDIR with consideration taken to country CC_CODE, which is
# defined for map data from suppliers which delivers more than one country
# in one product/release
ccSubName="";
if [ "$CC_CODE" ]; then
   ccSubName="${CC_CODE}";
fi
WFMIDMIFDIR="${RELEASEDIR}/wf_midmif/${ccSubName}"


if [ ! "$supplier" ]; then
   echo " no supplier defined - don't know what to do - exit"
   exit 1;
fi

echo "Supplier:        $supplier"
echo "Map release:     $mapRelease"
echo "Start step:      $startStep"
echo "Stop step:       $stopStep"
echo "Parse var file:"
echo "  $PARSEVARFILE"
echo "Supplier midmif dir:"
echo "  $MIDMIFDIR"
echo ""
echo "The wf midmif dir: $WFMIDMIFDIR"
echo "Create dir: ${WFMIDMIFDIR}/create";
echo "Poi dir:    ${WFMIDMIFDIR}/poi";
echo ""





function fixPlineMultiple {
   midFile="$1";
   mifFile="$2";
   type="$3";
   dirName="`dirname $midFile`"
   midFileName="`basename $midFile`"
   mifFileName="`basename $mifFile`"
   echo "   dirName=$dirName"
   echo "   midFileName=$midFileName mifFileName=$mifFileName"
   
   cd $dirName
   chk_res
   ${scriptDir}/midmif_fixPlineMultiple.pl $midFileName $mifFileName >& fixPlineMultipe_$type.log
   chk_res
   
   # compare number rows in mid file with nbr Pline+Region in miffile
   # exit if not ok
   midRows=`grep -c , newmid.mid`
   nbrPline=`grep -c Pline newmif.mif`
   nbrRegion=`grep -c Region newmif.mif`
   nbrMif=$nbrPline;
   nbrMif=$[nbrMif+$nbrRegion];
   echo "   nbrMidRows=$midRows nbrMifFeatures=$nbrMif"
   if [ ! $midRows -eq $nbrMif ]; then
      echo "   Number mid rows does not match number mif features"
      echo "   $dirName/newmid.mid"
      echo "   $dirName/newmif.mif"
      echo "   - exit"
      exit 1;
   fi

   # rename files
   mv newmid.mid new${midFileName}
   mv newmif.mif new${mifFileName}
}


######################################################
# Pre-Steps
# Find out if the midmif files are directly in the MIDMIFDIR
# or if they are in sub dirs
# Some data is in subdirs, other supplier don'thave sub dirs
workInSubDirs="";
if [ $supplier = "something" ]; then
   workInSubDirs="yes";
elif [ $supplier = "OSM" -o $supplier = "TeleAtlasMNshp" ]; then
   ok="ok";
else
   echo "define workInSubDirs for $supplier!"
   echo "how to run do2unix, check pline multiple and collection???"
   exit 1;
fi




######################################################
# Step 1 rundos2unix
#
if [ $startStep -le 1 -a $stopStep -ge 1 ]; then
   echo `date +"%Y%m%d %T"`" Step 1";

   
   echo `date +"%Y%m%d %T"`" Run dos2unix on all midmif files in $MIDMIFDIR";
   cd $MIDMIFDIR
   chk_res
   
   if [ "$workInSubDirs" ]; then
      dos2unix */*.txt >& /dev/null
      dos2unix */*.csv >& /dev/null
      dos2unix */*.mid >& /dev/null
      dos2unix */*.mif >& /dev/null
      dos2unix */*.MID >& /dev/null
      dos2unix */*.MIF >& /dev/null

      chmod g+rw */*.txt >& /dev/null
      chmod g+rw */*.csv >& /dev/null
      chmod g+rw */*.mid >& /dev/null
      chmod g+rw */*.mif >& /dev/null
      chmod g+rw */*.MID >& /dev/null
      chmod g+rw */*.MIF >& /dev/null
   else
      dos2unix *.txt >& /dev/null
      dos2unix *.csv >& /dev/null
      dos2unix *.mid >& /dev/null
      dos2unix *.mif >& /dev/null
      dos2unix *.MID >& /dev/null
      dos2unix *.MIF >& /dev/null

      chmod g+rw *.txt >& /dev/null
      chmod g+rw *.csv >& /dev/null
      chmod g+rw *.mid >& /dev/null
      chmod g+rw *.mif >& /dev/null
      chmod g+rw *.MID >& /dev/null
      chmod g+rw *.MIF >& /dev/null
   fi

   echo `date +"%Y%m%d %T"`" Step 1 done";
   echo "";
fi
stepsDone=1;




######################################################
# Step 2 correctPlineMultiple
#
if [ $startStep -le 2 -a $stopStep -ge 2 ]; then
   echo `date +"%Y%m%d %T"`" Step 2";
   echo `date +"%Y%m%d %T"`" Fix pline multiple";


   # Check if we need to fix some Pline Multiple or Collection mif features
   # for this supplier
   echo "Check for Pline Multiple and Collection mif features"
   cd $MIDMIFDIR
   chk_res
   if [ "$workInSubDirs" ]; then
      echo "Pline Multiple:"
      grep -i -c Multiple */*.MIF |grep -v ":0"
      grep -i -c Multiple */*.mif |grep -v ":0"
      echo "Collection:"
      grep -i -c Collection */*.MIF |grep -v ":0"
      grep -i -c Collection */*.mif |grep -v ":0"
   else
      echo "Pline Multiple:"
      grep -i -c Multiple *.MIF |grep -v ":0"
      grep -i -c Multiple *.mif |grep -v ":0"
      echo "Collection:"
      grep -i -c Collection *.MIF |grep -v ":0"
      grep -i -c Collection *.mif |grep -v ":0"
   fi
   

   # Example of how to fix Pline Multiple features in the files that has them
   # List the file types that have the Pline Multiple feature in the parse 
   # variable file PLINEMULTIPLES, and loop the file types here
   echo ""
   echo "Fix the Pline Multiple mif features"
#   if [ $supplier = "OSM" ]; then
#      for file in $PLINEMULTIPLES; do
#         if [ $file = "WATERLINE" ]; then
#            echo `date +"%Y%m%d %T"`" Fix pline multiple for waterline";
#            fixPlineMultiple $WATERLINEMID $WATERLINEMIF $file
#            
#         else
#            echo `date +"%Y%m%d %T"`"  Unknown type $file - exit";
#            exit 1;
#         fi
#      done
#   fi

   
   echo `date +"%Y%m%d %T"`" Step 2 done";
   echo "";
fi
stepsDone=2;

# Update the file name pointers for the corrected pline multiples
# No dir in the file name gives dirName = ./
# So this also works for data with no full path given in the parse
# variable file (e.g. the supplier with USESUBDIRS)

# Example of how to update the file name pointers for the files that 
# had Pline Multiple features fixed
# They will have the word "new" added first in the file name, see 
# the fixPlineMultiple function.
echo `date +"%Y%m%d %T"`" Update file name pointers from fixPlineMultiple";
#for file in $PLINEMULTIPLES; do
#   if [ $supplier = "OSM" ]; then
#      if [ $file = "WATERLINE" ]; then
#      dirName="`dirname $WATERLINEMID`"
#      midFileName="`basename $WATERLINEMID`"
#      mifFileName="`basename $WATERLINEMIF`"
#      WATERLINEMID="${dirName}/new${midFileName}";
#      WATERLINEMIF="${dirName}/new${mifFileName}";
#      
#      else
#         echo `date +"%Y%m%d %T"`"  Unknown type $file - exit";
#         exit 1;
#      fi
#   fi
#done
echo `date +"%Y%m%d %T"`" Done";
echo "";



######################################################
# Step 3
# This is the place to MERGE SAME-FEATURE FILES
# if e.g. parks or waters are split in several files
# from the supplier, to have only one file with parks etc,
# when running the script to convert to wayfinder midmif format.
if [ $startStep -le 3 -a $stopStep -ge 3 ]; then
   echo `date +"%Y%m%d %T"`" Step 3";
   

   if [ $supplier = "something" ]; then
      ok="ok";

      # Example of howto do this,
      # The ALLWATERMID and ALLWATERMIF file name must be defined in 
      # the parse variabel file, 
      # along with the WATERLINE, WATERLINEPOLYS, WATERPOLY

      #echo `date +"%Y%m%d %T"`" Merge water line and poly files";
      #if [ "$ALLWATERMID" ]; then
      #   cat $WATERLINEMID $WATERLINEPOLYSMID $WATERPOLYMID >& $ALLWATERMID
      #   chk_res
      #   cat $WATERLINEMIF $WATERLINEPOLYSMIF $WATERPOLYMIF >& $ALLWATERMIF
      #   chk_res
      #else
      #   echo `date +"%Y%m%d %T"`" ALLWATERMID not defined"
      #fi

   else
      echo `date +"%Y%m%d %T"`" Nothing to do for supplier $supplier";
   fi

   # remove inside mif header?
   
   echo `date +"%Y%m%d %T"`" Step 3 done"
   echo ""
fi
stepsDone=3;


######################################################
# Step 4 parse items
# make it possible to run each file as separate steps?
if [ $startStep -le 4 -a $stopStep -ge 4 ]; then
   echo `date +"%Y%m%d %T"`" Step 4"
   echo `date +"%Y%m%d %T"`" Parse midmif items"
   
   cd $RELEASEDIR;
   chk_res
   mkdir -p $WFMIDMIFDIR
   mkdir -p ${WFMIDMIFDIR}/municipals
   mkdir -p ${WFMIDMIFDIR}/create
   CREATEDIR="${WFMIDMIFDIR}/create";
   cd $CREATEDIR;
   chk_res
   LOGPATH="logpath"
   mkdir -p $LOGPATH



   ################ TeleAtlas MN shape data ##############
   if [ $supplier = "TeleAtlasMNshp" ]; then

      echo `date +"%Y%m%d %T"`" Parse midmif items TeleAtlas MN shape"

      countryCommand="";
      if [ "$CC_CODE" ]; then
         countryCommand="-c $CC_CODE";
      else
         echo "no country code CC_CODE given in parse varible file - exit"
         exit 1;
      fi
      coordSysOption="-y $coordSysString";
      
      # municipal
      echo `date +"%Y%m%d %T"`"   municipal";
      $scriptDir/midmif_taMNshape2wayfinder.pl -v $mapRelease $countryCommand $coordSysOption -t municipal $MUNICIPALMID $MUNICIPALMIF $ADMINALTNAMES >& $LOGPATH/parse_municipal.log
      chk_res

      # bua
      echo `date +"%Y%m%d %T"`"   builtUpArea";
      $scriptDir/midmif_taMNshape2wayfinder.pl -v $mapRelease $countryCommand $coordSysOption -t builtUpArea $BUAMID $BUAMIF >& $LOGPATH/parse_builtUpArea.log
      chk_res
      
      # cityPart
      echo `date +"%Y%m%d %T"`"   cityPart";
      $scriptDir/midmif_taMNshape2wayfinder.pl -v $mapRelease $countryCommand $coordSysOption -t cityPart $CITYPARTMID $CITYPARTMIF >& $LOGPATH/parse_cityPart.log
      chk_res
      
      # landuse
      echo `date +"%Y%m%d %T"`"   landuse";
      $scriptDir/midmif_taMNshape2wayfinder.pl -v $mapRelease $countryCommand $coordSysOption -t landuse $LANDUSEMID $LANDUSEMIF >& $LOGPATH/parse_landuse.log
      chk_res

      # land cover
      echo `date +"%Y%m%d %T"`"   landcover";
      $scriptDir/midmif_taMNshape2wayfinder.pl -v $mapRelease $countryCommand $coordSysOption -t landcover $LANDCOVERMID $LANDCOVERMIF >& $LOGPATH/parse_landcover.log
      chk_res

      # railway line
      echo `date +"%Y%m%d %T"`"   railway";
      $scriptDir/midmif_taMNshape2wayfinder.pl -v $mapRelease $countryCommand $coordSysOption -t railway $RAILWAYMID $RAILWAYMIF >& $LOGPATH/parse_railway.log
      chk_res
      
      # water areas
      echo `date +"%Y%m%d %T"`"   water poly";
      $scriptDir/midmif_taMNshape2wayfinder.pl -v $mapRelease $countryCommand $coordSysOption -t waterPoly $WATERAREAMID $WATERAREAMIF >& $LOGPATH/parse_waterPoly.log
      chk_res

      # water lines
      echo `date +"%Y%m%d %T"`"   water line";
      $scriptDir/midmif_taMNshape2wayfinder.pl -v $mapRelease  $countryCommand $coordSysOption -t waterLine $WATERLINEMID $WATERLINEMIF >& $LOGPATH/parse_waterLine.log
      chk_res
      
      # network restrictions (manouvers)
      echo `date +"%Y%m%d %T"`"   restrictions";
      $scriptDir/midmif_taMNshape2wayfinder.pl -v $mapRelease $countryCommand $coordSysOption -t restrictions $MANOUVERS $MANOUVERSPATH $NETWORKMID >& $LOGPATH/parse_restrictions.log
      chk_res
      
      # network ssi + ferry
      echo `date +"%Y%m%d %T"`"   network";
      $scriptDir/midmif_taMNshape2wayfinder.pl -v $mapRelease $countryCommand $coordSysOption -t network $NETWORKMID $NETWORKMIF $ELEMINAREA $MUNICIPALMID >& $LOGPATH/parse_network.log
      chk_res



   ################ OSM ################
   elif [ $supplier = "OSM" ]; then

      echo `date +"%Y%m%d %T"`" Parse midmif items $supplier"
      runScript="${scriptDir}/midmif_osm2wayfinder.pl";
      echo `date +"%Y%m%d %T"`" with script $runScript"
      
      countryCommand="";
      if [ "$CC_CODE" ]; then
         countryCommand="-c $CC_CODE";
      else
         echo "No CC_CODE given in parse variable file - exit"
         exit 0;
      fi
      if [ ! "$coordSysString" ]; then
         echo "No coord sys given - exit"
         exit 1;
      fi
      coordSysOption="-y $coordSysString";
      commonOptions=" -v $mapRelease $countryCommand $coordSysOption ";
      
      # buildings
      type="buildings";
      echo `date +"%Y%m%d %T"`"   $type";
      $runScript $commonOptions -t $type $BUILDINGSMID $BUILDINGSMIF >& $LOGPATH/parse_$type.log
      chk_res

      # naturals (park, forest, water polys)
      type="naturals";
      echo `date +"%Y%m%d %T"`"   $type";
      $runScript $commonOptions -t $type $NATURALSMID $NATURALSMIF >& $LOGPATH/parse_$type.log
      chk_res
      
      # railway
      type="railway";
      echo `date +"%Y%m%d %T"`"   $type";
      $runScript $commonOptions -t $type $RAILWAYMID $RAILWAYMIF >& $LOGPATH/parse_$type.log
      chk_res

      # waterways (water lines)
      type="waterways";
      echo `date +"%Y%m%d %T"`"   $type";
      $runScript $commonOptions -t $type $WATERWAYSMID $WATERWAYSMIF >& $LOGPATH/parse_$type.log
      chk_res
      
      # network
      echo `date +"%Y%m%d %T"`"   network";
      $runScript $commonOptions -t network $NETWORKMID $NETWORKMIF >& $LOGPATH/parse_network.log
      chk_res


   ################ Supplier #############################
   else
      # another supplier
      echo `date +"%Y%m%d %T"`" Parse midmif items for $supplier?"
      exit 1;
   fi






   # Check that all logfiles from the midmif parsing are ok
   # (no use of uninitialized values)
   echo ""
   echo "Check if files were parsed OK, no uninitialized values"
   grep -c -i "uninitialized" $LOGPATH/*.log |grep -v ":0" >& tmpfile.txt
   check=`cat tmpfile.txt`;
   rm tmpfile.txt
   if [ "$check" ]; then 
      if [ "$check" -ne "0" ]; then
         echo ""
         echo "ERROR Problem parsing one or more midmif files, using uninitialized values"
         echo "$check"
         echo "FIX IT!!!"
         exit 1;
      fi
   fi




   echo ""
   echo `date +"%Y%m%d %T"`" Merge multi-item files";
   # Merge multi-item files
   #  - parks
   #  - buildings (WFindustryItems.mif)
   #  - restrictions (turn table)
      
   if [ $supplier = "TeleAtlasMNshp" ]; then
      echo "merge wf water files into one WFwaterItems_all.mid/mif"
      cat WFwater_line.mid WFwater_poly.mid >& WFwaterItems_all.mid
      cat WFwater_line.mif WFwater_poly.mif >& WFwaterItems_all.mif
      
      echo "merge wf restrictions files and header file into one WFstreetSegmentItemsturntable.txt"
      cat WFturntableheader.txt WFrestrictionsTurntable.txt WFnetwork_restrictions.txt >& WFstreetSegmentItemsturntable.txt


   elif [ $supplier = "OSM" ]; then
      echo "merge wf water files into one WFwaterItems_all.mid/mif"
      cat WFwaterpoly.mid WFwaterways.mid >& WFwaterItems_all.mid
      cat WFwaterpoly.mif WFwaterways.mif >& WFwaterItems_all.mif
      
      echo "merge wf restrictions files and header file into one WFstreetSegmentItemsturntable.txt"
      cat WFturntableheader.txt WFnetwork_restrictions.txt >& WFstreetSegmentItemsturntable.txt
       
      
  
   else
      # another supplier
      echo `date +"%Y%m%d %T"`" Merge multi-item files for $supplier ?"
      exit 1;
   fi
   
   
   # Check mif headers of parsed files
   echo "";
   echo `date +"%Y%m%d %T"`" Check mif headers of WF mif files";
   echo "There should be a header in each mif file with coord sys tag"
   echo "examples:"
   echo "    CoordSys wgs84_lonlat_deg";
   echo "    CoordSys wgs84_latlon_deg";
   echo "Update incorrect mif file headers manually";
   echo "";
   if [ ! "$USESUBDIRS" ]; then
      for mifFile in `ls *.mif`; do
         nbrCoordSysTag=`grep -c -i coordSys $mifFile`;
         echo " $mifFile:  $nbrCoordSysTag coordsys tag"
         #coordSysTag=`grep -i coordSys $mifFile`;
         #echo "    $coordSysTag"
      done
   fi
   echo "";
   echo "Manually update the coordys tag of all mif headers that are incorrect"
   echo "";

   
   echo "Manually move the final WF municipal midmif item files to"
   echo " ${WFMIDMIFDIR}/municipals";
   echo "";
   echo "Manually move the final WF midmif item files to"
   echo " ${WFMIDMIFDIR}";
   echo "";
   
   echo "Manually remove any crap from the end of WF mif files"
   echo "";
   
   echo `date +"%Y%m%d %T"`" Step 4 done";
   echo "";
fi
stepsDone=4;



######################################################
# step 5 parse pois
# run the midmif parse script for pois
# make the poi types separate steps?
if [ $startStep -le 5 -a $stopStep -ge 5 ]; then
   echo `date +"%Y%m%d %T"`" Step 5";
   echo `date +"%Y%m%d %T"`" Parse POIs";
   echo `date +"%Y%m%d %T"`" Parse poi files for $supplier"
   
   cd ${RELEASEDIR}
   chk_res
   mkdir -p ${WFMIDMIFDIR}
   mkdir -p ${WFMIDMIFDIR}/poi
   POIDIR="${WFMIDMIFDIR}/poi";
   cd $POIDIR;
   chk_res
   LOGPATH="logpath"
   mkdir -p $LOGPATH
   
   # Parse all poi files, write to Wayfinder CPIF file
   # Converts coordinates to mc2 coord sys

   ################ TeleAtlas MN Shape ###################
   if [ $supplier = "TeleAtlasMNshp" ]; then

      countryCommand="";
      if [ "$CC_CODE" ]; then
         countryCommand="-c $CC_CODE";
      else
         echo "no country code CC_CODE given in parse varible file - exit"
         exit 1;
      fi
      coordSysOption="-y $coordSysString";
      
      # pois
      echo `date +"%Y%m%d %T"`"   poi";
      $scriptDir/midmif_taMNshape2wayfinder.pl $coordSysOption -v $mapRelease $countryCommand -t poi $POIMID $POIMIF $PIEA >& $LOGPATH/parse_poi.log
      chk_res
      
      # city centres
      echo `date +"%Y%m%d %T"`"   cityCentre";
      $scriptDir/midmif_taMNshape2wayfinder.pl $coordSysOption -v $mapRelease $countryCommand -t cityCentre $CITYCENTREMID $CITYCENTREMIF >& $LOGPATH/parse_cityCentre.log
      chk_res

   ################ OSM #####################
   elif [ $supplier = "OSM" ]; then

      runScript="${scriptDir}/midmif_osm2wayfinder.pl";
      countryCommand="";
      if [ "$CC_CODE" ]; then
         countryCommand="-c $CC_CODE";
      else
         echo "No CC_CODE given in parse variable file - exit"
         exit 0;
      fi
      if [ ! "$coordSysString" ]; then
         echo "No coord sys given - exit"
         exit 1;
      fi
      coordSysOption="-y $coordSysString";
      commonOptions=" -v $mapRelease $countryCommand $coordSysOption ";

      # pois
      type="poi";
      echo `date +"%Y%m%d %T"`"   $type";
      $runScript $commonOptions -t $type $POIMID $POIMIF >& $LOGPATH/parse_$type.log
      chk_res
      # city centres
      type="cityCentre";
      echo `date +"%Y%m%d %T"`"   $type";
      $runScript $commonOptions -t $type $CITYCENTREMID $CITYCENTREMIF >& $LOGPATH/parse_$type.log
      chk_res
      

   ################ Supplier #############################
   else
      # another supplier
      echo `date +"%Y%m%d %T"`" Parse poi files for $supplier ???"
      exit 1;
   fi
   


   
   
   # Check that all logfiles from the midmif parsing are ok
   # (no use of uninitialized values)
   grep -c -i "uninitialized" $LOGPATH/*.log |grep -v ":0" >& tmpfile.txt
   check=`cat tmpfile.txt`;
   rm tmpfile.txt
   if [ "$check" ]; then 
      if [ "$check" -ne "0" ]; then
         echo ""
         echo "ERROR Problem parsing one or more midmif files, using uninitialized values"
         echo "$check"
         echo "FIX IT!!!"
         exit 1;
      fi
   fi

   
   
   # Cat the parsed poi files and convert to utf-8 if needed
   echo "";
   if [ $supplier = "TeleAtlasMNshp" ]; then
      echo "cat poi files to WFcpif_all_${CC_CODE}.txt";
      cat WFcpif_poi_${CC_CODE}.txt WFcpif_cc_${CC_CODE}.txt >& WFcpif_all_${CC_CODE}.txt

   elif [ $supplier = "OSM" ]; then
      echo "cat poi files to WFcpif_all_${CC_CODE}_utf8.txt";
      cat WFcpif_poi_${CC_CODE}.txt WFcpif_cc_${CC_CODE}.txt >& WFcpif_all_${CC_CODE}_utf8.txt
   
   else
      # another supplier
      echo " Cat poi files and convert char-encoding for $supplier???"
      exit 1;
   fi
   
   
   echo "";
   echo "Add POIs to WASP with poi_autoImport.pl (poiImport.pl -f readCPIF)"
   echo "";

   echo `date +"%Y%m%d %T"`" Step 5 done";
   echo "";
fi
stepsDone=5;





