#!/bin/sh -x
# Script to generate maps.
#


# BASEGENFILESPATH 
# genfiles is the base directory where all setting files for map generation
# is stored:
# - countries
#   country directories with country specific setting files for the different
#   map releases that are available for the country
#   The name of the country directories for the 227 countries in Wayfinder world
#   are defined in the makemaps.mcgen wf_world countrySet list. (antartica is a
#   possible country, however not wanted in the maps on Wayfinder server)
# - countrypol
#   country polygon border break point file
# - extradata/stitching
#   files for stitching between countries from different map suppliers
# - mergeWorld
#   setting files for merge map generations
# - script
#   directory with all sub scripts needed in map generation and POI handling
# - xml
#   directory with global xml setting files for map generation
#
# Update it to point to the full path of where you create the BASEGENFILESPATH
#BASEGENFILESPATH="fullpath/genfiles";
BASEGENFILESPATH="."


# Fill in where the MC2 repo is located, so you can checkout the latest
# version of the extradata.sh file to be used in this script
# Else the version in the genfiles script-dir is used
MC2REPO="";



# Script control
# Comment out any variable to be set to false, or use option

noDist="";
dist2="";

addFromWASP="true";
extDB="true";
noExtData="";
filterMaps="true";

fromMapDataExtr="";
onlyMerge="";

# include help functions used in this makemaps script
source ${BASEGENFILESPATH}/script/mfunctions.sh

# Print the commandline to the log.
commandLine="$0";
for i; do
    commandLine="${commandLine} $i";
done
echo "Command line: ${commandLine}";





# Read input arguments.
argNbr=0;  # Index of non-flagged parameter.
pos=1;     # Corresponds to index of positional parameter.
flaggedArg=""; #false
for i; do 

   posPlus=`echo $[pos+1]`
   case $i in
      -h) echo "Usage: "
          echo "makemaps [OPTIONS] countryName"
          echo ""
          echo "Example of country first generation:"
          echo "makemaps sweden -mapRelease TA_2009_09 -noExtFiltOrWASP -dist2 -afterMapDataExtrBackup"
          echo "Example of country second generation:"
          echo "makemaps sweden -mapRelease TA_2009_09 -noFilt -dist2"
          echo ""
          echo "Options:"
          echo "-mapRelease MAPRELEASE"
          echo "          Determines what map release to get map data"
          echo "          from. Example TA_2009_09."
          echo ""
          echo "-noDist   The map generation is run on the"
          echo "          processors the script is run on."
          echo "-dist2  The map generation is run on the"
          echo "          processors the script is run on x 2."
          echo "-dist COMPUTERS"
          echo "          The map generation is distributed on the"
          echo "          COMPUTERS that are given as one argument, "
          echo "          e.g. -dist \"hostname hostname\". It might be "
          echo "          the same hostname as many times as there are "
          echo "          processors on that computer."
          echo "          Option cannot be combined with -noDist."
          echo ""
          echo "-noExtOrWASP"
          echo "          Combines the options -noExtDB, -noExtData and"
          echo "          -noWASP."
          echo "-noExtFiltOrWASP"
          echo "          Combines the options -noExtDB, -noExtData "
          echo "          -noFilt and -noWASP. Used when generating a"
          echo "          country for the first time, a first gen, when "
          echo "          you want to compare with a previous map release"
          echo "          and not be affected by map corrections, WASPing etc"
          echo "-noExtDB"
          echo "          The extra data base is not used, i.e. no map "
          echo "          correction records are applied to the maps."
          echo "-noExtData"
          echo "          No extra data from the extra data files is put "
          echo "          on the maps."
          echo "-noWASP"
          echo "          No POIs added to the maps from WASP (WASPing)."
          echo "-noFilt"  
          echo "          No filtering is done."
          echo ""
          echo "-skipControlledAccessPOIsWhenWasping"
          echo "          When WASPing, skip POIs with special rights"
          echo ""
          echo "-onlyMerge"
          echo "          Continues generation from after the before_merge"
          echo "          backup was taken."
          echo "-fromMapDataExtr"
          echo "          Starts generation from after map data extraction,"
          echo "          using the maps in after_mapDataExtr."
          echo "-mdeBkpDir BKP_DIRECTORY"
          echo "          Use together with -fromMapDataExtr. Makes the "
          echo "          script fetch the data from the after_mapDataExtr "
          echo "          directory pointed at by BKP_DIRECTORY. The directory "
          echo "          after_mapDataExtr is created and filled with the "
          echo "          maps. After this generation starts."
          echo ""
          echo "-varFile VARFILESUFFIX"
          echo "          Use a special variables file."
          echo "          VARFILESUFFIX is the text between the filename and"
          echo "          the .sh suffix. E.g. 2002_2Small if the file "
          echo "          variables_denmark.2002_2Small.sh is wanted for "
          echo "          Denmark."
          echo ""
          echo "-allBackups"
          echo "          Activates all backup options below. Useful when"
          echo "          trying to find out what step in the map "
          echo "          generation that does what."
          echo "          The essential before_merge backup before connecting "
          echo "          underview and creation of overview maps is always "
          echo "          taken regardless of what backup options are given."
          echo "     -afterMapGenBackup"
          echo "          A backup after first part of map generation from "
          echo "          map supplier."
          echo "     -afterMapDataExtrBackup"
          echo "          A backup is taken after all map data extraction is "
          echo "          completed. Use these maps to save time when "
          echo "          regenerating from the same map release."
          echo "     -afterIntConnBackup"
          echo "     -afterPostProcBackup"
          echo "     -afterStrGenBackup"
          echo "     -afterTrnGenBackup"
          echo "     -afterSetLocBackup"
          echo "     -afterExtConnBackup"
          echo ""
          exit;; 
      -noExtOrWASP)  addFromWASP="";
                     noExtData="true";
                     extDB="";;
      -noExtFiltOrWASP) addFromWASP="";
                        noExtData="true";
                        extDB="";
                        filterMaps="";;
      -noExtData) noExtData="true";;
      -noExtDB) extDB="";;
      -onlyMerge) onlyMerge="true";;
      -fromMapDataExtr) fromMapDataExtr="true";;
      -mdeBkpDir) eval MDEBKPDIR=$`echo $[pos+1]`;
           flaggedArg="true";;
      -extDB) extDB="true";;
      -noWASP) addFromWASP="";;
      -noFilt) filterMaps="";;
      -skipControlledAccessPOIsWhenWasping) skipControlledAccessPOIsWhenWasping="true";;

      -noDist) noDist="true";;
      -dist2) dist2="true";;
      -dist) eval COMPUTERS_IN_ARG=$`echo $[pos+1]`;
           flaggedArg="true";;

      -varFile) eval VARFILE_IN_ARG=$\{${posPlus}\};
           flaggedArg="true";;
      -mapRelease) eval MAP_RELEASE_ARG=$\{`echo $[pos+1]`\};
           flaggedArg="true";;
      -afterMapGenBackup) afterMapGenBackup="true";;
      -afterMapDataExtrBackup) afterMapDataExtrBackup="true";;
      -afterIntConnBackup) afterIntConnBackup="true";;
      -afterPostProcBackup) afterPostProcBackup="true";;
      -afterStrGenBackup) afterStrGenBackup="true";;
      -afterTrnGenBackup) afterTrnGenBackup="true";;
      -afterSetLocBackup) afterSetLocBackup="true";;
      -afterExtConnBackup) afterExtConnBackup="true";;
      -allBackups) afterMapGenBackup="true";
                   afterMapDataExtrBackup="true";
                   afterIntConnBackup="true";
                   afterStrGenBackup="true";
                   afterPostProcBackup="true";
                   afterTrnGenBackup="true";
                   afterSetLocBackup="true";
                   afterExtConnBackup="true";;
      -*) echo "Invalid option $i"; exit;;
      *) if [ ${flaggedArg} ]; then
           flaggedArg=""; #false
         else
            eval arg${argNbr}="$i";
            argNbr=$[argNbr+1]
         fi;;
   esac
   pos=$[pos+1];
done


# The name of the country. Used for finding all directories.
COUNTRY=$arg0
# Check argument sanity
if [ -z $COUNTRY ]; then
    echo "You must specify a country to generate.";
    echo "Use option -h for help";
    exit 1
fi 
echo `date +"%Y%m%d %T"`" Start $COUNTRY.";


# Distribute flag.
distFlag="-e"; # Makes distribute die on error.


MAPRELEASE="";
if [ "$MAP_RELEASE_ARG" ]; then
    if [ "$MAP_RELEASE_ARG" = "TA_2010_06" ]; then
        # Tele Atlas
        MAPRELEASE="${MAP_RELEASE_ARG}";

    elif [ "$MAP_RELEASE_ARG" = "OSM_201005" ]; then
        MAPRELEASE="${MAP_RELEASE_ARG}";
        
    else
         echo "Invalid map release. Exits!"
         exit 33
    fi
else
    echo "Map release not set. Exits!";
    exit 33
fi




#########################################################################
## DEFAULT VALUES #######################################################
## - Includes some tests of the values                                  #
## - Is typically overridden in the country specific variables file     #
##   when needed, or by the command line parameters.                    #
#########################################################################

# Determines which computers to run on.
# May be overridden by COMPUTERS_IN_ARG or the VAR_FILE.
if [ $noDist ]; then
   COMPUTERS_CPU=`mhostname`;
elif [ $dist2 ]; then
   COMPUTERS_CPU=`mhostname`;
   COMPUTERS_CPU="${COMPUTERS_CPU} ${COMPUTERS_CPU}";
elif [  "${COMPUTERS_IN_ARG}" ]; then
    COMPUTERS_CPU=$COMPUTERS_IN_ARG;
    echo "Using COMPUTERS_CPU from script argument."
else
   echo "No computer set! Exit!";
   exit 1;
fi
echo "Will run on: $COMPUTERS_CPU"





   # This is where you find the country specific files
GENFILESPATH="${BASEGENFILESPATH}/countries/$COUNTRY";

   # Points to map release specific setting files for the country
   # May be overridden in the VAR_FILE.
# Areafiles
AREAPATH="${GENFILESPATH}/${MAPRELEASE}/areafiles"
# Path to the xml files for this country and map release
XMLPATH="${GENFILESPATH}/${MAPRELEASE}/xml"
# Country polygon mif-file and old country maps.
COUNTRYMAP="${GENFILESPATH}/countrypol"


# The long version of the map supplier string, needed 
# - for mapOrigin option to map generation
# - in contact with database for POIs and/or map corrections
# String for other map suppliers than TeleAtlas needs to be set in VAR_FILE
MAP_SUPPLIER="TeleAtlas_"

# XML files
CO_FILE=${XMLPATH}/${COUNTRY}_co.xml
AR_FILE=${XMLPATH}/${COUNTRY}_ar.xml
REGIONFILE="${BASEGENFILESPATH}/xml/region_ids.xml"


# GMS country name, i.e. the country name that is sent to GenerateMapServer
# in map generation.
# May be overridden in the VAR_FILE 
# (e.g is done for uk which is set to england).
COUNTRY_NAME=${COUNTRY}

# For call to ExtradataExtracor the country name must be like
# the one in the WASP database country table
EE_COUNTRY_NAME=`getDatabaseCountryName $COUNTRY`
if [ ! "$EE_COUNTRY_NAME" ]; then
   EE_COUNTRY_NAME=${COUNTRY}
fi




## END DEFAULT VALUES ###################################################
#########################################################################

#
# Country specific variables. 
#
varFileRelease=".$MAP_RELEASE_ARG";
if [ "$VARFILE_IN_ARG" ]; then
    varFileRelease=".$VARFILE_IN_ARG"
fi
VAR_FILE="${GENFILESPATH}/script/variables_${COUNTRY}${varFileRelease}.sh"
# Test that the variables file exists.
if [ ! -e $VAR_FILE ]; then
    echo "Variables file for $COUNTRY does not exist. Exits!"
    echo "Trying to use: $VAR_FILE";
    exit 6
fi
echo "Using variable file: $VAR_FILE";
source ${VAR_FILE}

# Variables from script argument.
mapOrigin=${MAP_SUPPLIER}`echo "${MAP_RELEASE_ARG}" | sed -e 's/^[A-Za-z]*_//'`;
extraDBRelease=${MAP_SUPPLIER}`echo "${MAP_RELEASE_ARG}" | sed -e 's/^[A-Za-z]*_//'`;


#Collect old country map files paths.
OLDCOM_LIST="";
oldCoMaps=`ls ${COUNTRYMAP}/08*.mcm`
for map in ${oldCoMaps}; do
   OLDCOM_LIST="${OLDCOM_LIST} ${map}";
done
# Check if we have old country maps.
entered=""
for oldcom in $OLDCOM_LIST; do
    entered="true"
done
if [ ! "$entered" ]; then
   echo "WARN: OLDCOM_LIST has not been set for $COUNTRY."
   echo " That is the list with old country overview maps stored in "
   echo " the countrypol dir ${COUNTRYMAP}"
fi



# Test xml files existence
if [ !  -e $CO_FILE  ]; then
    echo "CO_FILE: $CO_FILE";
    echo "CO_FILE for $COUNTRY doesn't exist. Exits!";
    exit 2
fi
if [ ! -e $AR_FILE ]; then
    echo "AR_FILE: $AR_FILE";
    echo "AR_FILE for $COUNTRY doesn't exist. Exits!";
    exit 3
fi
if [ ! -e $REGIONFILE ]; then
    echo "REGIONFILE: $REGIONFILE";
    echo "REGIONFILE doesn't exist. Exits!";
    exit 4
fi





# Test that all necessary variables has been set in the variable file.

entered=""
for a in $AREALIST; do
    entered="true"
done
if [ ! "$entered" ]; then
    echo "AREALIST has not been set for $COUNTRY. Exits!";
    exit 7
fi

if [ -z $CO_CODE ]; then
    echo "CO_CODE has not been set for $COUNTRY. Exits!";
    exit 8
fi
if [ ! -d $MAPPATH ]; then
    echo "MAPPATH for $COUNTRY does not exist. Exits!"
    exit 9
fi
   # Check that we can find the maps.
if (! [ -d $MAPPATH ] ) then
   echo "Could not find the mappath $MAPPATH."
   exit 10
fi

  # Create a special area list to test that all areafiles needed are in place
AREATESTLIST="";
for area in $AREALIST; do
  AREATESTLIST="${AREATESTLIST} ${area}.mid";
  AREATESTLIST="${AREATESTLIST} ${area}.mif";
  AREATESTLIST="${AREATESTLIST} ${area}map.mif";
done

  # Check that all needed areafiles exists.
pushd ${AREAPATH} > /dev/null
chk_res
for area in $AREATESTLIST; do   
    if [ -e  $area ]; then
        ok="ok";
    else
        echo "The areafile $area is missing";
        exit 20
    fi
done
popd> /dev/null


# Get the most recent extradata.sh to have the latest additions available
# If mc2 repo is given, the latest version of extradata.sh is checked out to
# this directory, else the version in the genfiles script-dir is used
echo ""
echo "Get the latest extradata.sh file"
EXTRADATAFILE="${BASEGENFILESPATH}/script/extradata.sh"
if [ "${MC2REPO}" ]; then
   echo " get it from repository ${MC2REPO}"
   # get revision id of "tip"
   EDTIP=`ssh hg "cd ${MC2REPO};hg tip" | grep "^changeset" | cut -d":" -f2`;
   # get extradata.sh from hg
   `ssh hg "cd ${MC2REPO};hg cat -r ${EDTIP} Server/bin/Scripts/MapGen/extradata.sh" > extradata.sh`;
   if ( [ -s "./extradata.sh" ] ) then
      EXTRADATAFILE="./extradata.sh"
      echo "using $EXTRADATAFILE from mc2 repository tip $EDTIP"
   fi
else
   echo " get it from genfiles script dir"
fi

if (! [ -s $EXTRADATAFILE ] ) then
   echo "No extradata.sh file - exits!";
   exit 1;
fi
echo ""

source ${EXTRADATAFILE}
if [ ${noExtData} ]; then
    # Overrides the extradata method in the extradata file.
    function extradata(){
        echo "Not using extradata";
    }
else
    echo "Testing extradata.sh here: ${EXTRADATAFILE}"
    extradata $COUNTRY dummy_insert > /dev/null
    chk_res
    echo "";
fi







########################################################################
# Done initiating and checking, 
# Map generation starts.


echo ""
echo `date +"%Y%m%d %T"`
echo "=========================================================="
echo "Generating maps for $COUNTRY"
echo "=========================================================="
echo "Country code:    $CO_CODE"
echo "Map path:        $MAPPATH"
echo "=========================================================="
# Print some release information.
    echo "Map release:                   $MAPRELEASE"
    echo "Release of variables file:     `echo $varFileRelease | sed -e 's/\.//'`";
    echo "Map origin for map generation: $mapOrigin"
    echo "Extra database release:        $extraDBRelease"
    echo "Extra database country:        $EE_COUNTRY_NAME"
echo "=========================================================="
echo "Backups that will be taken:"
      echo " Always the before_merge and additionally:"
      if [ ${afterMapGenBackup} ];then  
         echo "1/8:afterMapGenBackup after_mapgen"; fi
      if [ ${afterMapDataExtrBackup} ];then  
         echo "2/8:afterMapDataExtrBackup after_mapDataExtr"; fi
      if [ ${afterIntConnBackup} ];then  
         echo "3/8:afterIntConnBackup after_intconn"; fi
      if [ ${afterPostProcBackup} ]; then 
         echo "4/8:afterPostProcBackup after_postproc"; fi
      if [ ${afterStrGenBackup} ];then  
         echo "5/8:afterStrGenBackup after_strgen"; fi
      if [ ${afterTrnGenBackup} ];then  
         echo "6/8:afterTrnGenBackup after_trngen"; fi
      if [ ${afterSetLocBackup} ];then  
         echo "7/8:afterSetLocBackup after_setloc"; fi
      if [ ${afterExtConnBackup} ];then  
         echo "8/8:afterExtConnBackup after_extconn"; fi
echo "=========================================================="



   # Make sure that group has write permission in the map generation directory
chmod g+rw .
chmod g+s .

   # Create dir for logfiles
LOGPATH="logpath"
mkdir -p $LOGPATH
chmod g+rw $LOGPATH
# Write where the logfiles can be found.
echo "Log files can be found in ${HOSTNAME}:${LOGPATH}" > where_to_find_logs.txt


   # Run dos2unix on all used areafiles.
echo ""
echo `date +"%Y%m%d %T"`" Runs dos2unix on areafiles in ${AREAPATH}.";
pushd ${AREAPATH} > /dev/null
chk_res
chmod o+rwx * > /dev/null
for area in $AREATESTLIST; do   
    dos2unix $area > /dev/null
done
chmod a+rwx * > /dev/null
popd > /dev/null



  # Determine which side to drive on in the country
echo ""
tmpDrivingSide="`getDrivingSide $COUNTRY`";
#if [ `getDrivingSide $COUNTRY` = "left" ]; then
if [ "$tmpDrivingSide" = "left" ]; then
    drivingSide="--driveonleftside";
    echo "Driving side set to left.";
elif [ "$tmpDrivingSide" = "right" ]; then
    drivingSide="";
    echo "Driving side set to right.";
else
    # something else was returned from the getDrivingSide function
    # - problem
    echo "Problem getting tmpDrivingSide: $tmpDrivingSide"
    exit 1;
fi





# Script flow control
if [ ! "${onlyMerge}" ]; then
if [ ! "${fromMapDataExtr}" ]; then


# Start generating maps from scratch, check that we don't already have
# some maps in this directory # This check prints error messages for ls.
if [ "`ls *.mcm* | grep -m 1 \".*\"`" ]; then
   echo ""
   echo "Generating maps from scratch but *mcm* files already exist";
   echo "- exit!"
   exit 1;
fi



# ===Mid=mif=generation===
echo ""
echo `date +"%Y%m%d %T"`" Generates from mid/mif."


echo ""
echo `date +"%Y%m%d %T"`" Generates municipal maps for:"
id=0;
for area in $AREALIST; do

   copyright="";
   if [ "${COPYRIGHT}" ]; then
       copyrightArg=--copyrightString=;
       copyrightValue="${COPYRIGHT}"; 
       copyright=${copyrightArg}"${copyrightValue}";
   fi

   # typicall areafile name: den_whole_municipalItems
   # rm any leading co code.
   tmpMapName=`echo ${area} | sed -e "s/^${CO_CODE}//"`; 
   # rm all chars after the last underscore
   mapName="${CO_CODE}`echo ${tmpMapName} | sed -e 's/_[^_]*$//'`"

   # print map name to logfile (echo)
   printf "   Map: 0x%x(%d): $mapName\n" $id $id;
   preploclog $LOGPATH/init_${area}.log;
   nice time ./GenerateMapServer --country=$COUNTRY_NAME         \
                            --saveas=$id                         \
                            --initMapFromMidMid=$AREAPATH/$area  \
                            ${copyright}   \
                            ${drivingSide}                       \
                            --name=${mapName}                    \
                            --verbose=1                          \
                            --maporigin=${mapOrigin}             \
                            >& $loclog
   chk_log
   id=$[id + 1];
done



  # Determine if to use the addAllMidMifItems (--addAllMidMifItems)
  # Given in variable file, knowing the fact that we have only one mcm map
  # and thus all midmif items should be added to this one map
addAllMidMifItems="";
if [ "$ONLYONEMAP" ]; then 
   echo "Only one mcm map, will force addition of all midmif items to the map"
   addAllMidMifItems="--addAllMidMifItems";
fi


echo ""
echo `date +"%Y%m%d %T"`" Adding mid/mif items:"

mapGenDir="`pwd`";
echo "mapGenDir=$mapGenDir"
for midMifFiles in `cd ${MAPPATH} && ls *.mif && cd -`; do

   # runing on centos will give one row with pwd
   if [ "$mapGenDir" = "$midMifFiles" ]; then
      echo "SKIP crap file $midMifFiles"
   else
      fileNoSuffix="`echo ${midMifFiles} | sed -e 's/\.[^.]*$//'`";
      echo `date +"%Y%m%d %T"`"   Adding from $fileNoSuffix";
      preploclog $LOGPATH/create_$fileNoSuffix.log
      nice time ./GenerateMapServer                        \
           --createItemsFromMidMif=${MAPPATH}/$fileNoSuffix \
           ${addAllMidMifItems}                             \
           >& $loclog
      chk_log
      nbrRows=`grep -c "." ${MAPPATH}/${fileNoSuffix}.mid`
      nbrAdded=`grep -c IATM $LOGPATH/create_$fileNoSuffix.log`
      echo `date +"%Y%m%d %T"`"   added $nbrAdded of $nbrRows";
   fi
done

echo ""
echo `date +"%Y%m%d %T"`" Creating boundry segments for all maps."
if [ "$SKIPBOUNDRYSEGMENTS" ]; then
   # Given in variable file:
   # if the segments which are on the border of a map are already 
   # marked with borderNode in the Wayfinder midmif format mid file
   # and virtual items were created already
   echo "Variable file says skip create boundry segments"
else
   # Create virtual items, 
   # i.e. candidates for external connections = connections between underview maps
   preploclog $LOGPATH/createBoundrySegments.log
   nice time ./GenerateMapServer --createBorderBoundrySegments >& $loclog
   chk_log
fi

#=End=of=mid=mif=generation==




if [ ${afterMapGenBackup} ]; then
    echo ""
    echo `date +"%Y%m%d %T"`" Backup after_mapgen, after map generating "
    echo "                   of normal maps from map supplier"
    mkdir -p after_mapgen
    cp *.mcm* after_mapgen
    chk_res
    pushd after_mapgen
    chk_res
    bzip2 *
    popd
fi












   # This is the place to generate extra item maps, map id 0x2001 and higher

   # Water files.

   # Outer world.


   # Add extra items. 
   # This is the place in map generation to add items to the normal maps
   # from extra item maps (id 0x2001 and up).
   # The extraitem maps can be created either from this makemaps script
   # right before this GMS call or possibly be preprocessed and stored on 
   # disc somewhere and perhaps pointed at in the variables files.
   # Either way, the extra item maps must be located in the
   # generation directory.
echo ""
echo `date +"%Y%m%d %T"`" Adding from extra item maps.";
preploclog $LOGPATH/gs_u.log
nice time ./GenerateMapServer -u >& $loclog
chk_log






# Backup after all map data is added to the mcm underview maps
# Useful to have if you want to continue a map generation from a safe step
# E.g. it is taken before any affection of WASPing, map correction records
# or any other extra data that might be added later in map gen process.
if [ ${afterMapDataExtrBackup} ]; then
    echo ""
    echo `date +"%Y%m%d %T"`" Backup after_mapDataExtr, after map generating "
    echo "                   of normal maps from map supplier and addition from extra item maps"
    mkdir -p after_mapDataExtr
    cp *.mcm* after_mapDataExtr
    chk_res
    pushd after_mapDataExtr
    chk_res
    chmod g+rw . -R >& /dev/null
    bzip2 *
    popd
fi


fi # ! fromMapDataExtr
# Here starts fromMapDataExtr generation.

if [ "${fromMapDataExtr}" ]; then
    echo `date +"%Y%m%d %T"`" Generates from map data extraction bkp";
    
    if [ "${MDEBKPDIR}" ]; then
        if [ -e after_mapDataExtr ]; then
            echo "Using -mdeBkpDir but after_mapDataExtr exists, Exits.";
            exit 1;
        fi
        checkDirOK=`basename ${MDEBKPDIR}`
        if [ $checkDirOK != "after_mapDataExtr" ]; then
            echo "Incorrect dir given for the -mdeBkpDir option?"
            echo " ${MDEBKPDIR} "
            echo "Please point to the after_mapDataExtr dir, Exits.";
            exit 1;
        fi
        
        echo `date +"%Y%m%d %T"`" Copies files from ${MDEBKPDIR} to "
        echo " after_mapDataExtr";
        mkdir after_mapDataExtr
        cp ${MDEBKPDIR}/*.mcm* after_mapDataExtr # only copy maps
        chk_res
    fi
    
    # Check if we have maps in the directory already.
    # This one prints error messages for ls.
    echo ""
    if [ "`ls *.mcm* index.db | grep -m 1 \".*\"`" ]; then
        echo "Using -fromMapDataExtr but index.db or *mcm* files exist";
        exit 1;
    fi
    echo ""
            
    echo `date +"%Y%m%d %T"`" Copies files from after_mapDataExtr";
    cp after_mapDataExtr/* .
    chk_res
    echo `date +"%Y%m%d %T"`" Unzipps files.";
    bunzip2 *.bz2;
fi  # fromMapDataExtr

   # Extradata
extradata $COUNTRY after_extitm $MAPRELEASE
chk_res


mkdir -p temp

   # Extradata from extradatabase
if [ "${extDB}" ]; then
    echo ""
    echo `date +"%Y%m%d %T"`" Adds extradata from extradatabase: beforeInternalConnections";
    preploclog  $LOGPATH/extradata1.log
    nice ./ExtradataExtractor -q -t beforeInternalConnections -c "${EE_COUNTRY_NAME}" -r ${extraDBRelease} > extradata1.tmp 2> $loclog
    chk_log

    preploclog $LOGPATH/ed1.log
    ./GenerateMapServer --usingDatabase -x extradata1.tmp >& $loclog
    chk_log
    mv extradata1.tmp temp
fi



# Here was a step called internal connections, which is not longer used
# This step is the reason for the extradata above to be called beforeInternalConnections
# and the one below to be called after_intconn


   # Moves stuff to temp.
echo ""
echo `date +"%Y%m%d %T"`" Moves some stuff to the temp directory.";
mv 000002*.mcm temp >& /dev/null
chmod g+rw temp -R >& /dev/null


if [ ${afterIntConnBackup} ]; then
    echo ""
    echo `date +"%Y%m%d %T"`" Backup after internal connections."
    mkdir -p after_intconn
    cp *.mcm after_intconn
    chk_res
    pushd after_intconn
    chk_res
    bzip2 *
    popd
fi






   # Extradata
extradata $COUNTRY after_intconn $MAPRELEASE
chk_res

if [ "$buildings2D" ]; then
   echo ""
   echo `date +"%Y%m%d %T"`" Buildings from 2D city maps";
   if [ -e "${buildings2D}.mid" ]; then
      echo "Adding from file ${buildings2D}.mid/mif"
      nice time ./GenerateMapServer --loopAllMaps --tryToBuildMapGfxFromMunicipals -r ${buildings2D} >& $LOGPATH/add2Dcitymaps_buildings.log
      ${checkFunction}

      grepLine=`grep -i "Created and added" $LOGPATH/add2Dcitymaps_buildings.log`
      tmp="`echo ${grepLine} | sed -e 's/^\(.*\)Created and added \(.*\) midmif items to the looped mcm\(.*\)/\2/'`"
      nbrAdded=`echo $tmp | awk -F " of " '{print $1}'`
      nbrTotal=`echo $tmp | awk -F " of " '{print $2}'`
      echo " added $nbrAdded of total $nbrTotal"
      if [ $nbrAdded -gt $nbrTotal ]; then
         echo "Problem, added $nbrAdded of total $nbrTotal"
         exit 1;
      fi

   else
      echo "File ${buildings2D}.mid/mif does not exist"
      exit 1;
   fi
   
fi

   # Mixed post processing
failedHoleElims="";
echo ""
echo `date +"%Y%m%d %T"`" GMS: mixed post processing.";
for map in `ls 0000000*.mcm`; do
    echo "source ${BASEGENFILESPATH}/script/mfunctions.sh; cd "`pwd`" ; preploclog  $LOGPATH/$map.post_proc.log; nice time ./GenerateMapServer --mixed-post-proc $map >& \$loclog; chk_log" 

done > distributedMixedpostproc.sh
./distribute ${distFlag} $COMPUTERS_CPU < distributedMixedpostproc.sh
chk_res

# grep for nbr items that failed in hole elimination
nbrIBI=`grep " FCR_" $LOGPATH/*.post_proc.log |grep "item type: 23"| wc -l`
echo "Failed elimHoles and/or elimSelftouch for $nbrIBI IBI"
nbrAcri=`grep " FCR_" $LOGPATH/*.post_proc.log |grep "item type: 20" | wc -l`
echo "Failed elimHoles and/or elimSelftouch for $nbrAcri ACRI"
if [ $nbrAcri -gt 0 ]; then
   grepLineAcri=`grep " FCR_" $LOGPATH/*.post_proc.log |grep "item type: 20"` >& /dev/null
   allFailed="`echo ${grepLineAcri} | sed -e 's/^\(.*\) FCR_\(.*\)map \(.*\) item \(.*\) item type\(.*\)/\3:\4/' |sort -n|uniq`" >& /dev/null
   for failed in $allFailed; do 
      mapID=`echo $failed | awk -F ":" '{print $1}'`
      itemID=`echo $failed | awk -F ":" '{print $2}'`
      echo " failed elimHoles and/or elimSelftouch for acri map:item $mapID $itemID"
      failedHoleElims="$failedHoleElims $mapID:$itemID";
   done 
fi
   


if [ ${afterPostProcBackup} ]; then
    echo ""
    echo `date +"%Y%m%d %T"`" Backup afterPostProcBackup"
    mkdir -p after_postproc
    cp *.mcm after_postproc
    chk_res
    pushd after_postproc
    chk_res
    bzip2 *
    popd
fi

# Add address point names to the street segments in the map.
if [ "${ADDRPOINTFILE}" ]; then
   if [ ! -e ${ADDRPOINTFILE} ]; then
      echo "The ${ADDRPOINTFILE} file does not exist, exit!";
      exit 1;
   fi
   echo ""
   echo `date +"%Y%m%d %T"`" Adding address point names from file ${ADDRPOINTFILE}";
   ./GenerateMapServer --addAddrPointNames=${ADDRPOINTFILE} >& ${LOGPATH}/gs_addrPoint.log
   chk_res
fi


   # Add external zip codes, i.e. zip codes from zip point files
   # that were not part of the basic source data for the map generation
   # i.e. no zip code attributes on street segments in the source data
if [ "$SECTIONEDZIPSDIR" ]; then
   echo ""
   echo `date +"%Y%m%d %T"`" Will add external zips for country=${COUNTRY} supplier=$MAP_SUPPLIER.";
   echo `date +"%Y%m%d %T"`" Dir with zip poi file $SECTIONEDZIPSDIR";
   if [ ! -e $SECTIONEDZIPSDIR ]; then
      echo "The $SECTIONEDZIPSDIR dir does not exist, exit!";
      exit 1;
   else
      echo ""
      echo `date +"%Y%m%d %T"`" Backup before external zips"
      mkdir -p before_extZip
      cp *.mcm* before_extZip
      chk_res
      pushd before_extZip
      chk_res
      bzip2 *
      popd
      
      echo ""
      echo `date +"%Y%m%d %T"`" Adding external zips.";
      for i in 00*.mcm; do
         echo `date +"%Y%m%d %T"`" Adding zips to $i";
         ./GenerateMapServer --addSectionedZipPOIs=${SECTIONEDZIPSDIR} $i >& ${LOGPATH}/$i.addZips.log;
         chk_res;
      done
   fi
fi





   # Extradata from extradatabase
if [ "${extDB}" ]; then
    echo ""
    echo `date +"%Y%m%d %T"`" Adds extradata from extradatabase: beforeGenerateStreets";
    preploclog $LOGPATH/extradata2.log
    nice ./ExtradataExtractor -q -t beforeGenerateStreets -c "${EE_COUNTRY_NAME}" -r  ${extraDBRelease} > extradata2.tmp 2> $loclog;
    chk_log

    preploclog $LOGPATH/ed2.log
    ./GenerateMapServer --usingDatabase -x extradata2.tmp >& $loclog
    chk_log

    mv extradata2.tmp temp
fi





   # Generate streets from street segments.
echo ""
echo `date +"%Y%m%d %T"`" GMS: generates streets.";

for map in `ls 0000000*.mcm`; do
    echo "source ${BASEGENFILESPATH}/script/mfunctions.sh; cd "`pwd`" ; preploclog  $LOGPATH/$map.gs_J.log; nice time ./GenerateMapServer -J $map >& \$loclog; chk_log" 

done > distributedStreetgen.sh
./distribute ${distFlag} $COMPUTERS_CPU < distributedStreetgen.sh
chk_res
   # Zip log files from generate streets
echo ""
echo `date +"%Y%m%d %T"`" Zipping generate streets log files.";
pushd ${LOGPATH}
chk_res
find . -type f -name "*.mcm.gs_J.log" -print0 | xargs -0 gzip -f
popd




if [ ${afterStrGenBackup} ]; then
    echo ""
    echo `date +"%Y%m%d %T"`" Backup afterStrGenBackup"
    mkdir -p after_strgen
    cp *.mcm after_strgen
    chk_res
    pushd after_strgen
    chk_res
    bzip2 *
    popd
fi


   # Extradata from extradatabase
if [ "${extDB}" ]; then
    echo ""
    echo `date +"%Y%m%d %T"`" Adds extradata from extradatabase: beforeGenerateTurndescriptions";
    preploclog $LOGPATH/extradata3.log
    nice ./ExtradataExtractor -q -t beforeGenerateTurndescriptions -c "${EE_COUNTRY_NAME}" -r  ${extraDBRelease} > extradata3.tmp 2> $loclog
    chk_log

    preploclog $LOGPATH/ed3.log
    ./GenerateMapServer --usingDatabase -x extradata3.tmp >& $loclog
    chk_log

    mv extradata3.tmp temp
fi

   # Generate turn descriptions.
echo ""
echo `date +"%Y%m%d %T"`" GMS: generates turn descriptions.";
for map in `ls 0000000*.mcm`; do
    echo "source ${BASEGENFILESPATH}/script/mfunctions.sh; cd "`pwd`" ; preploclog  $LOGPATH/$map.gs_t.log; nice time ./GenerateMapServer -t $map >& \$loclog; chk_log" 

done > distributedTurndescgen.sh
./distribute ${distFlag} $COMPUTERS_CPU < distributedTurndescgen.sh
chk_res

if [ ${afterTrnGenBackup} ]; then
    echo ""
    echo `date +"%Y%m%d %T"`" Backup afterTrnGenBackup"
    mkdir -p after_trngen
    cp *.mcm after_trngen
    chk_res
    pushd after_trngen
    chk_res
    bzip2 *
    popd
fi




   # Extradata
extradata $COUNTRY after_trngen $MAPRELEASE
chk_res

   # Extradata from extradatabase
if [ "${extDB}" ]; then
    echo ""
    echo `date +"%Y%m%d %T"`" Adds extradata from extradatabase: afterGenerateTurndescriptions";
    preploclog $LOGPATH/extradata4.log
    nice ./ExtradataExtractor -q -t afterGenerateTurndescriptions -c "${EE_COUNTRY_NAME}" -r  ${extraDBRelease} > extradata4.tmp 2> $loclog
    chk_log

    preploclog $LOGPATH/ed4.log
    nice ./GenerateMapServer --usingDatabase -x extradata4.tmp >& $loclog
    chk_log
    mv extradata4.tmp temp
fi


   # Move all midmif reference files to the temp directory
   # Here after no more items from midmif are added to the maps..
mv *.midmif_ref temp >& /dev/null


   # Set locations for all items that do not have one already.
echo ""
echo `date +"%Y%m%d %T"`" GMS: sets location.";
for map in `ls 0000000*.mcm`; do
    echo "source ${BASEGENFILESPATH}/script/mfunctions.sh; cd "`pwd`" ; preploclog  $LOGPATH/gs_l_${map}.log; nice time ./GenerateMapServer -l $map >& \$loclog; chk_log" 

done > distributedSetlocation.sh
./distribute ${distFlag} $COMPUTERS_CPU < distributedSetlocation.sh
chk_res

if [ ${afterSetLocBackup} ]; then
    echo ""
    echo `date +"%Y%m%d %T"`" Backup afterSetLocBackup"
    mkdir -p after_setloc
    cp *.mcm after_setloc
    chk_res
    pushd after_setloc
    chk_res
    bzip2 *
    popd
fi


   # Extradata
extradata $COUNTRY after_setloc $MAPRELEASE
chk_res



if [ $addFromWASP ]; then
    echo ""
    echo `date +"%Y%m%d %T"`" Adding POIs from WASP.";
    skipCtrlAccFlag="";
    if [ ${skipControlledAccessPOIsWhenWasping} ]; then
       skipCtrlAccFlag="--skipControlledAccessPOIs";
    fi
    preploclog $LOGPATH/we_addPOIs.log
    ./WASPExtractor -a ${skipCtrlAccFlag} *.mcm  >& $loclog
    chk_log
    echo `date +"%Y%m%d %T"`" Done with WASPing.";
else
    echo "";
    echo "Does not add from WASP!"
fi




   # Finish up index areas
echo ""
echo `date +"%Y%m%d %T"`" GMS: finish index areas.";
preploclog $LOGPATH/finishIndexAreas.log
nice ./GenerateMapServer --finishIndexAreas >& $loclog
chk_log




    # Extradata
extradata $COUNTRY before_merge $MAPRELEASE
chk_res


   ### Now everything that can be done country by country have been done.
   ### Save a backup to use when merging the maps with other countries.
echo ""
echo `date +"%Y%m%d %T"`" Backup before merge (gfx map).";
mkdir -p before_merge
cp *.mcm before_merge
pushd before_merge
chk_res
bzip2 *
popd
echo "$MAPRELEASE" > before_merge/mapOrigin.txt # don't zip this file


fi # onlyMerge


   #
   # =====================================================================
   # Maps generated to this point should be used in a merge map generation
   # =====================================================================
   #


   #Copy the countrymap mif
echo ""
echo `date +"%Y%m%d %T"`" Copies country map(s) from ${COUNTRYMAP}."
cp -u $COUNTRYMAP/*.mif .

   # Create external connections between the maps
echo ""
echo `date +"%Y%m%d %T"`" GMS: external connections.";
preploclog $LOGPATH/gs_e.log
nice time ./GenerateMapServer -e >& $loclog
chk_log

if [ ${afterExtConnBackup} ]; then
    echo ""
    echo `date +"%Y%m%d %T"`" Backup afterExtConnBackup"
    mkdir -p after_extconn
    cp *.mcm after_extconn
    chk_res
    pushd after_extconn
    chk_res
    bzip2 *
    popd
fi

   # Extradata
extradata $COUNTRY after_extconn $MAPRELEASE
chk_res



   # Copy the mif file to the current directory.
echo ""
echo `date +"%Y%m%d %T"`" Copying mif file from $COUNTRYMAP/";
cp -u $COUNTRYMAP/*.mif .

   # Add the country overview map
   # all filtering of co pol (comap map gfxdata) is done here
echo ""
echo `date +"%Y%m%d %T"`" GMS: creates country overview map(s).";
   HDLUNDFILE="undName2MapID.txt";
   if [ -e ${HDLUNDFILE} ]; then
       rm ${HDLUNDFILE}
       echo "Removed ${HDLUNDFILE}";
   fi
   if [ -e 080000001.mcm ]; then
       echo ""
       echo "Existing country overview map present when starting country";
       echo "overview map creation. Exits!";
       exit 1;
   fi
   breakPointsOpt="--coPolBreakPoints=${BASEGENFILESPATH}/countrypol/countryBorderBreakPoints.txt";
   
    # Generate country overview maps one at a time.
   continue="TRUE";
   ovrCount=0;
   while [ "$continue" ]; do
       nice time ./GenerateMapServer ${breakPointsOpt} -X ${CO_FILE} ${OLDCOM_LIST} >& $LOGPATH/gs_X_${ovrCount}.log
       exitCode=$?;
       if [ ${exitCode} -eq 77 ]; then
           continue="";
       elif [ ${exitCode} -ne 0 ]; then
           echo "Country overview creation returned error, extis!"
           exit 1;
       fi
       ovrCount=$[ovrCount+1];
   done


   # Check the result from country overview creation.
nbrHandled=`grep "TRUE" ${HDLUNDFILE} | wc -l`
nbrUnderviews=`ls -1 00*.mcm | wc -l`
echo "Added " ${nbrHandled} " underview maps of " ${nbrUnderviews}
echo "to country maps.";
if [ ${nbrUnderviews} -ne ${nbrHandled} ]; then
    echo "Not all underview maps have been added to the country"
    echo "overviewmaps. Check your *co.xml file. Exits! "
    exit 1;
fi

   # Now we can create border items.
   # Uses the borderItems.txt and countryBorders.txt files
echo ""
echo `date +"%Y%m%d %T"`" GMS: create border items";
    nice time ./GenerateMapServer ${breakPointsOpt} --createBorderItems >& $LOGPATH/gs_borderItems.log
   chk_res




   # Create the overview maps
echo ""
echo `date +"%Y%m%d %T"`" GMS: creates overview map(s).";
   HDLUNDFILE="mapName2MapID.txt";
   if [ -e ${HDLUNDFILE} ]; then
       rm ${HDLUNDFILE}
       echo "Removed ${HDLUNDFILE}";
   fi
   if [ -e 080000000.mcm ]; then
       echo ""
       echo "Existing overview map present when starting ";
       echo "overview map creation. Exits!";
       exit 1;
   fi

   # Generate overview maps one at a time.
   continue="TRUE";
   ovrCount=0;
   while [ "$continue" ]; do
       nice time ./GenerateMapServer  --createOverview --coXML="${CO_FILE}" >& $LOGPATH/gs_ovr_$ovrCount.log
       exitCode=$?;
       if [ ${exitCode} -eq 77 ]; then
           continue="";
       elif [ ${exitCode} -ne 0 ]; then
           echo "Overview creation returned error, extis!"
           exit 1;
       fi
       ovrCount=$[ovrCount+1];
   done

   # Check the result from overview creation.
   nbrHandled=`grep " [0-9]\{1,3\} TRUE" ${HDLUNDFILE} | wc -l`
   nbrUnderviews=`ls -1 00*.mcm | wc -l`
   echo "Added" ${nbrHandled} "underview maps of" ${nbrUnderviews}
   echo "to overview maps.";
   if [ ${nbrUnderviews} -ne ${nbrHandled} ]; then
       echo "Not all underview maps have been added to the country"
       echo "overviewmaps. Check your *co.xml file. Exits! "
       exit 1;
   fi


   # Add zip codes from overview maps to country overview maps.
echo ""
echo `date +"%Y%m%d %T"`" GSM: adds zipcodes from overview maps to";
echo "country overview maps.";
ls 08*[13579dbf].mcm | while read coOverview; do
fileName=`basename $coOverview`
coId=`echo $fileName | sed -e 's/\(^.*\)\.mcm.*$/\1/'`;
decOvrId=$[0x$coId-1];
ovrId=`printf "%x" $decOvrId`
preploclog ${LOGPATH}/addZip_${ovrId}.log
nice time ./GenerateMapServer --addziptocountrymaps=${coId}.mcm 0${ovrId}.mcm >& $loclog
chk_log
done
pushd ${LOGPATH}
chk_res
find . -type f -name "addZip_*.log" -print0 | xargs -0 gzip -f
popd


   # Create external connections between overviews
echo ""
echo `date +"%Y%m%d %T"`" GMS: creates external connections between overviews."
# hex 0x80000000 = dec 2147483648
preploclog $LOGPATH/gs_e_E.log
nice time ./GenerateMapServer -e -E 2147483648 >& $loclog
chk_log

   # Extradata
extradata $COUNTRY after_ovrmaps $MAPRELEASE
chk_res


# For large countries that have many top regions, create the super overview map
# This applies in particular for USA, where the US states are top regions
if [ ${COUNTRY} = "usa" ]; then
  # Create the super overview map (edits index.db).
  COO_LIST=${XMLPATH}/${COUNTRY}_coo.xml
  echo ""
  echo `date +"%Y%m%d %T"`" GMS: super overview map(s).";
  
  continue="TRUE";
  ovrCount=0;
  while [ "$continue" ]; do
      echo `date +"%Y%m%d %T"`"    GMS: super overview map $ovrCount.";
      nice time ./GenerateMapServer --createOverview --coXML="${COO_LIST}" >& $LOGPATH/gs_supovr_${ovrCount}.log
      exitCode=$?;
      if [ ${exitCode} -eq 77 ]; then
          continue="";
      elif [ ${exitCode} -ne 0 ]; then
          echo "Overview creation returned error, extis!"
          exit 1;
      fi
       ovrCount=$[ovrCount+1];
  done


  # Check the result from super overview creation.
  HDLUNDFILE="mapName2MapID.txt";
  nbrHandled=`grep " [0-9]\{9\}[02468] TRUE" ${HDLUNDFILE} | wc -l`
  nbrUnderviews=`ls -1 08*[02468ace].mcm | wc -l`
  echo "Added" ${nbrHandled} "underview maps of" ${nbrUnderviews}
  echo "to overview maps.";
  if [ ${nbrUnderviews} -ne ${nbrHandled} ]; then
      echo "Not all overview maps have been added to the super"
      echo "overviewmaps. Check your *coo.xml file. Exits! "
      exit 1;
  fi
  
      # External connections between super overview maps.
  echo ""
  echo `date +"%Y%m%d %T"`" GMS: external connection between super overview maps."
   # hex 0x90000000 = dec 2415919104
  preploclog $LOGPATH/gs_e_E09.log
  nice time ./GenerateMapServer -e -E 2415919104 >& $loclog
  chk_log
  
fi # COUNTRY = "usa"



   ### Create index.db
   #
   #   Now all overview maps have been created (both level 1 and level 2),
   #   time to create the index and add the regions.
   #
   ###

   # Create the index.db file.
echo `date +"%Y%m%d %T"`" GMS: create index.";
preploclog $LOGPATH/gs_createIndex.log
nice ./GenerateMapServer --createNewIndex --coXML="${CO_FILE}" --cooXML="${COO_LIST}" >& $loclog
chk_log

   # Add regions
echo ""
echo `date +"%Y%m%d %T"`" GMS: add regions to index.";
preploclog $LOGPATH/gs_ar.log
nice time ./GenerateMapServer --addRegionsToIndex --arXML="${AR_FILE} ${REGIONFILE}" >& $loclog
chk_log



   # Extradata
extradata $COUNTRY after_addreg $MAPRELEASE
chk_res

   # Filter maps (log prints in filterMergedMaps.sh)
if [ "${filterMaps}" ]; then
    SINGLEGENCOMPUTER=`echo "${COMPUTERS_CPU}" | sed -e 's/\ .*$//'`
    BKPDIR="`pwd`"; # before_filt directory will be created here.
    GENDIR="`pwd`"; # the maps to filter should be found here.
    ${BASEGENFILESPATH}/script/filterMergedMaps.sh "${BKPDIR}" "${GENDIR}" "${SINGLEGENCOMPUTER}"
    chk_res
fi

   # Update creation times
echo ""
echo `date +"%Y%m%d %T"`" GMS: updates creation times.";
preploclog $LOGPATH/gms_u.log
nice time ./GenerateMapServer --updateCreationTimes >& $loclog
chk_log


echo ""
echo `date +"%Y%m%d %T"`" Adds permit to *.mcm and index.db.";
chmod a+r *.mcm
chmod g+w *.mcm
chmod g+rw .
chmod a+r index.db
chmod g+w index.db

 # Making quality report.
echo ""
echo `date +"%Y%m%d %T"`" Running verify.";
rm -rf qualLog
mkdir qualLog
./verify . 2>&1| tee -a qualLog/qualityreport.log


  # Check log files from midmif addition, that all midmif items were added
  # It checks midmif extradata,
  # and also the WFmidmif-addition for MIDMIF-countries
if [ ! "${noExtData}" ]; then
   rm checkmidmifitemstmp.txt >& /dev/null
   rm checkmidmifitemstmp2.txt >& /dev/null
   rm checkmidmifitemsproblems.txt >& /dev/null
   grep -c "Create items from mid mif" $LOGPATH/*.log|grep -v ":0" >& checkmidmifitemstmp.txt
   while read line; do
      logfile="`echo ${line} | sed -e 's/^\(.*\)log:\(.*\)/\1log/'`"
      logfilename="`basename $logfile`"
      grep "INFO" $logfile| grep "now totally " |tail -n 1 >& checkmidmifitemstmp2.txt
      while read line2; do
         tmp="`echo ${line2} | sed -e 's/^\(.*\)now totally \(.*\)) saving map\(.*\)/\2/'`"
         nbrAdded=`echo $tmp | awk -F " of " '{print $1}'`
         nbrTotal=`echo $tmp | awk -F " of " '{print $2}'`
         if [ $nbrAdded -ne $nbrTotal ]; then
            echo "$logfilename added $nbrAdded of $nbrTotal" >> checkmidmifitemsproblems.txt
         fi
      done < checkmidmifitemstmp2.txt
   done < checkmidmifitemstmp.txt
   if [ -e checkmidmifitemsproblems.txt ]; then
      echo ""
      while read line; do 
         echo "PROBLEM with midmif addition for: $line"
         if [ -e qualLog/qualityreport.log ]; then
            echo "" >> qualLog/qualityreport.log
            echo "PROBLEM with midmif addition for: $line" >> qualLog/qualityreport.log
         fi
      done < checkmidmifitemsproblems.txt
      echo ""
   fi
   rm checkmidmifitemstmp.txt >& /dev/null
   rm checkmidmifitemstmp2.txt >& /dev/null
   rm checkmidmifitemsproblems.txt >& /dev/null
fi

if [ "$failedHoleElims" ]; then
   echo ""
   echo "Failed hole elimination and/or eliminate self touch for some items"
   echo "$failedHoleElims"
   if [ -e qualLog/qualityreport.log ]; then
      echo "" >> qualLog/qualityreport.log
      echo "Failed hole elimination and/or eliminate self touch for some items" >> qualLog/qualityreport.log
      echo "$failedHoleElims" >> qualLog/qualityreport.log
   fi
fi








# Add reading permits to everything in this dir, and write to group
chmod a+r . -R >& /dev/null
chmod g+rw . -R >& /dev/null

echo ""
echo `date +"%Y%m%d %T"`" Finished $COUNTRY.";

exit 0;
